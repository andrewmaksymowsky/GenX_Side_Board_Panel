
GenX_SidePanel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004950  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004b80  08004b80  00014b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08004b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e98  20000010  08004b94  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000ea8  08004b94  00020ea8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014feb  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000314c  00000000  00000000  0003502b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001078  00000000  00000000  00038178  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ed0  00000000  00000000  000391f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008053  00000000  00000000  0003a0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000057f3  00000000  00000000  00042113  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00047906  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000040c8  00000000  00000000  00047984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ae8 	.word	0x08004ae8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004ae8 	.word	0x08004ae8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b97a 	b.w	80004fc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	468c      	mov	ip, r1
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	9e08      	ldr	r6, [sp, #32]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d151      	bne.n	80002d4 <__udivmoddi4+0xb4>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d96d      	bls.n	8000312 <__udivmoddi4+0xf2>
 8000236:	fab2 fe82 	clz	lr, r2
 800023a:	f1be 0f00 	cmp.w	lr, #0
 800023e:	d00b      	beq.n	8000258 <__udivmoddi4+0x38>
 8000240:	f1ce 0c20 	rsb	ip, lr, #32
 8000244:	fa01 f50e 	lsl.w	r5, r1, lr
 8000248:	fa20 fc0c 	lsr.w	ip, r0, ip
 800024c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000250:	ea4c 0c05 	orr.w	ip, ip, r5
 8000254:	fa00 f40e 	lsl.w	r4, r0, lr
 8000258:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800025c:	0c25      	lsrs	r5, r4, #16
 800025e:	fbbc f8fa 	udiv	r8, ip, sl
 8000262:	fa1f f987 	uxth.w	r9, r7
 8000266:	fb0a cc18 	mls	ip, sl, r8, ip
 800026a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026e:	fb08 f309 	mul.w	r3, r8, r9
 8000272:	42ab      	cmp	r3, r5
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x6c>
 8000276:	19ed      	adds	r5, r5, r7
 8000278:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800027c:	f080 8123 	bcs.w	80004c6 <__udivmoddi4+0x2a6>
 8000280:	42ab      	cmp	r3, r5
 8000282:	f240 8120 	bls.w	80004c6 <__udivmoddi4+0x2a6>
 8000286:	f1a8 0802 	sub.w	r8, r8, #2
 800028a:	443d      	add	r5, r7
 800028c:	1aed      	subs	r5, r5, r3
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb5 f0fa 	udiv	r0, r5, sl
 8000294:	fb0a 5510 	mls	r5, sl, r0, r5
 8000298:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800029c:	fb00 f909 	mul.w	r9, r0, r9
 80002a0:	45a1      	cmp	r9, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x98>
 80002a4:	19e4      	adds	r4, r4, r7
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 810a 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80002ae:	45a1      	cmp	r9, r4
 80002b0:	f240 8107 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	eba4 0409 	sub.w	r4, r4, r9
 80002bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002c0:	2100      	movs	r1, #0
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d061      	beq.n	800038a <__udivmoddi4+0x16a>
 80002c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ca:	2300      	movs	r3, #0
 80002cc:	6034      	str	r4, [r6, #0]
 80002ce:	6073      	str	r3, [r6, #4]
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xc8>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d054      	beq.n	8000386 <__udivmoddi4+0x166>
 80002dc:	2100      	movs	r1, #0
 80002de:	e886 0021 	stmia.w	r6, {r0, r5}
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	f040 808e 	bne.w	800040e <__udivmoddi4+0x1ee>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xdc>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2d0>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	46ac      	mov	ip, r5
 8000306:	2e00      	cmp	r6, #0
 8000308:	d03f      	beq.n	800038a <__udivmoddi4+0x16a>
 800030a:	e886 1010 	stmia.w	r6, {r4, ip}
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	b912      	cbnz	r2, 800031a <__udivmoddi4+0xfa>
 8000314:	2701      	movs	r7, #1
 8000316:	fbb7 f7f2 	udiv	r7, r7, r2
 800031a:	fab7 fe87 	clz	lr, r7
 800031e:	f1be 0f00 	cmp.w	lr, #0
 8000322:	d134      	bne.n	800038e <__udivmoddi4+0x16e>
 8000324:	1beb      	subs	r3, r5, r7
 8000326:	0c3a      	lsrs	r2, r7, #16
 8000328:	fa1f fc87 	uxth.w	ip, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000332:	0c25      	lsrs	r5, r4, #16
 8000334:	fb02 3318 	mls	r3, r2, r8, r3
 8000338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800033c:	fb0c f308 	mul.w	r3, ip, r8
 8000340:	42ab      	cmp	r3, r5
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x134>
 8000344:	19ed      	adds	r5, r5, r7
 8000346:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x132>
 800034c:	42ab      	cmp	r3, r5
 800034e:	f200 80d1 	bhi.w	80004f4 <__udivmoddi4+0x2d4>
 8000352:	4680      	mov	r8, r0
 8000354:	1aed      	subs	r5, r5, r3
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb5 f0f2 	udiv	r0, r5, r2
 800035c:	fb02 5510 	mls	r5, r2, r0, r5
 8000360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000364:	fb0c fc00 	mul.w	ip, ip, r0
 8000368:	45a4      	cmp	ip, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x15c>
 800036c:	19e4      	adds	r4, r4, r7
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x15a>
 8000374:	45a4      	cmp	ip, r4
 8000376:	f200 80b8 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 040c 	sub.w	r4, r4, ip
 8000380:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000384:	e79d      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000386:	4631      	mov	r1, r6
 8000388:	4630      	mov	r0, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	f1ce 0420 	rsb	r4, lr, #32
 8000392:	fa05 f30e 	lsl.w	r3, r5, lr
 8000396:	fa07 f70e 	lsl.w	r7, r7, lr
 800039a:	fa20 f804 	lsr.w	r8, r0, r4
 800039e:	0c3a      	lsrs	r2, r7, #16
 80003a0:	fa25 f404 	lsr.w	r4, r5, r4
 80003a4:	ea48 0803 	orr.w	r8, r8, r3
 80003a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003b0:	fb02 4411 	mls	r4, r2, r1, r4
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003bc:	fb01 f30c 	mul.w	r3, r1, ip
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x1bc>
 80003c8:	19ed      	adds	r5, r5, r7
 80003ca:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ce:	f080 808a 	bcs.w	80004e6 <__udivmoddi4+0x2c6>
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	f240 8087 	bls.w	80004e6 <__udivmoddi4+0x2c6>
 80003d8:	3902      	subs	r1, #2
 80003da:	443d      	add	r5, r7
 80003dc:	1aeb      	subs	r3, r5, r3
 80003de:	fa1f f588 	uxth.w	r5, r8
 80003e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ee:	fb00 f30c 	mul.w	r3, r0, ip
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1e6>
 80003f6:	19ed      	adds	r5, r5, r7
 80003f8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003fc:	d26f      	bcs.n	80004de <__udivmoddi4+0x2be>
 80003fe:	42ab      	cmp	r3, r5
 8000400:	d96d      	bls.n	80004de <__udivmoddi4+0x2be>
 8000402:	3802      	subs	r0, #2
 8000404:	443d      	add	r5, r7
 8000406:	1aeb      	subs	r3, r5, r3
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	e78f      	b.n	800032e <__udivmoddi4+0x10e>
 800040e:	f1c1 0720 	rsb	r7, r1, #32
 8000412:	fa22 f807 	lsr.w	r8, r2, r7
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 f401 	lsl.w	r4, r5, r1
 800041c:	ea48 0303 	orr.w	r3, r8, r3
 8000420:	fa20 fe07 	lsr.w	lr, r0, r7
 8000424:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000428:	40fd      	lsrs	r5, r7
 800042a:	ea4e 0e04 	orr.w	lr, lr, r4
 800042e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000432:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000436:	fb0c 5519 	mls	r5, ip, r9, r5
 800043a:	fa1f f883 	uxth.w	r8, r3
 800043e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000442:	fb09 f408 	mul.w	r4, r9, r8
 8000446:	42ac      	cmp	r4, r5
 8000448:	fa02 f201 	lsl.w	r2, r2, r1
 800044c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x244>
 8000452:	18ed      	adds	r5, r5, r3
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000458:	d243      	bcs.n	80004e2 <__udivmoddi4+0x2c2>
 800045a:	42ac      	cmp	r4, r5
 800045c:	d941      	bls.n	80004e2 <__udivmoddi4+0x2c2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	441d      	add	r5, r3
 8000464:	1b2d      	subs	r5, r5, r4
 8000466:	fa1f fe8e 	uxth.w	lr, lr
 800046a:	fbb5 f0fc 	udiv	r0, r5, ip
 800046e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000472:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45a0      	cmp	r8, r4
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x26e>
 800047e:	18e4      	adds	r4, r4, r3
 8000480:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000484:	d229      	bcs.n	80004da <__udivmoddi4+0x2ba>
 8000486:	45a0      	cmp	r8, r4
 8000488:	d927      	bls.n	80004da <__udivmoddi4+0x2ba>
 800048a:	3802      	subs	r0, #2
 800048c:	441c      	add	r4, r3
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba4 0408 	sub.w	r4, r4, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454c      	cmp	r4, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	464d      	mov	r5, r9
 80004a0:	d315      	bcc.n	80004ce <__udivmoddi4+0x2ae>
 80004a2:	d012      	beq.n	80004ca <__udivmoddi4+0x2aa>
 80004a4:	b156      	cbz	r6, 80004bc <__udivmoddi4+0x29c>
 80004a6:	ebba 030e 	subs.w	r3, sl, lr
 80004aa:	eb64 0405 	sbc.w	r4, r4, r5
 80004ae:	fa04 f707 	lsl.w	r7, r4, r7
 80004b2:	40cb      	lsrs	r3, r1
 80004b4:	431f      	orrs	r7, r3
 80004b6:	40cc      	lsrs	r4, r1
 80004b8:	6037      	str	r7, [r6, #0]
 80004ba:	6074      	str	r4, [r6, #4]
 80004bc:	2100      	movs	r1, #0
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	4618      	mov	r0, r3
 80004c4:	e6f8      	b.n	80002b8 <__udivmoddi4+0x98>
 80004c6:	4690      	mov	r8, r2
 80004c8:	e6e0      	b.n	800028c <__udivmoddi4+0x6c>
 80004ca:	45c2      	cmp	sl, r8
 80004cc:	d2ea      	bcs.n	80004a4 <__udivmoddi4+0x284>
 80004ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d2:	eb69 0503 	sbc.w	r5, r9, r3
 80004d6:	3801      	subs	r0, #1
 80004d8:	e7e4      	b.n	80004a4 <__udivmoddi4+0x284>
 80004da:	4628      	mov	r0, r5
 80004dc:	e7d7      	b.n	800048e <__udivmoddi4+0x26e>
 80004de:	4640      	mov	r0, r8
 80004e0:	e791      	b.n	8000406 <__udivmoddi4+0x1e6>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e7be      	b.n	8000464 <__udivmoddi4+0x244>
 80004e6:	4601      	mov	r1, r0
 80004e8:	e778      	b.n	80003dc <__udivmoddi4+0x1bc>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	e745      	b.n	800037c <__udivmoddi4+0x15c>
 80004f0:	4608      	mov	r0, r1
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xe6>
 80004f4:	f1a8 0802 	sub.w	r8, r8, #2
 80004f8:	443d      	add	r5, r7
 80004fa:	e72b      	b.n	8000354 <__udivmoddi4+0x134>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050a:	2003      	movs	r0, #3
 800050c:	f000 f918 	bl	8000740 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000510:	200f      	movs	r0, #15
 8000512:	f000 f80d 	bl	8000530 <HAL_InitTick>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800051c:	2301      	movs	r3, #1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	e001      	b.n	8000526 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000522:	f004 f937 	bl	8004794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000526:	79fb      	ldrb	r3, [r7, #7]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800053c:	4b16      	ldr	r3, [pc, #88]	; (8000598 <HAL_InitTick+0x68>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d022      	beq.n	800058a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_InitTick+0x6c>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <HAL_InitTick+0x68>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000550:	fbb1 f3f3 	udiv	r3, r1, r3
 8000554:	fbb2 f3f3 	udiv	r3, r2, r3
 8000558:	4618      	mov	r0, r3
 800055a:	f000 f918 	bl	800078e <HAL_SYSTICK_Config>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d10f      	bne.n	8000584 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b0f      	cmp	r3, #15
 8000568:	d809      	bhi.n	800057e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056a:	2200      	movs	r2, #0
 800056c:	6879      	ldr	r1, [r7, #4]
 800056e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000572:	f000 f8f0 	bl	8000756 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <HAL_InitTick+0x70>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	e007      	b.n	800058e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	73fb      	strb	r3, [r7, #15]
 8000582:	e004      	b.n	800058e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000584:	2301      	movs	r3, #1
 8000586:	73fb      	strb	r3, [r7, #15]
 8000588:	e001      	b.n	800058e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000004 	.word	0x20000004
 800059c:	2000000c 	.word	0x2000000c
 80005a0:	20000000 	.word	0x20000000

080005a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_IncTick+0x1c>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_IncTick+0x20>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4413      	add	r3, r2
 80005b2:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <HAL_IncTick+0x1c>)
 80005b4:	6013      	str	r3, [r2, #0]
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000d30 	.word	0x20000d30
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return uwTick;
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <HAL_GetTick+0x14>)
 80005ce:	681b      	ldr	r3, [r3, #0]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000d30 	.word	0x20000d30

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	; (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db0a      	blt.n	800066e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	490d      	ldr	r1, [pc, #52]	; (8000690 <__NVIC_SetPriority+0x4c>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800066c:	e00a      	b.n	8000684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	4909      	ldr	r1, [pc, #36]	; (8000694 <__NVIC_SetPriority+0x50>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	f003 030f 	and.w	r3, r3, #15
 8000676:	3b04      	subs	r3, #4
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	b2d2      	uxtb	r2, r2
 800067c:	0112      	lsls	r2, r2, #4
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	440b      	add	r3, r1
 8000682:	761a      	strb	r2, [r3, #24]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000e100 	.word	0xe000e100
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000698:	b480      	push	{r7}
 800069a:	b089      	sub	sp, #36	; 0x24
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	f1c3 0307 	rsb	r3, r3, #7
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	bf28      	it	cs
 80006b6:	2304      	movcs	r3, #4
 80006b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3304      	adds	r3, #4
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d902      	bls.n	80006c8 <NVIC_EncodePriority+0x30>
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3b03      	subs	r3, #3
 80006c6:	e000      	b.n	80006ca <NVIC_EncodePriority+0x32>
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	2201      	movs	r2, #1
 80006ce:	69bb      	ldr	r3, [r7, #24]
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	1e5a      	subs	r2, r3, #1
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	401a      	ands	r2, r3
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006de:	2101      	movs	r1, #1
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	1e59      	subs	r1, r3, #1
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ec:	4313      	orrs	r3, r2
         );
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3724      	adds	r7, #36	; 0x24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b01      	subs	r3, #1
 8000708:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800070c:	d301      	bcc.n	8000712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800070e:	2301      	movs	r3, #1
 8000710:	e00f      	b.n	8000732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000712:	4a0a      	ldr	r2, [pc, #40]	; (800073c <SysTick_Config+0x40>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800071a:	210f      	movs	r1, #15
 800071c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000720:	f7ff ff90 	bl	8000644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <SysTick_Config+0x40>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072a:	4b04      	ldr	r3, [pc, #16]	; (800073c <SysTick_Config+0x40>)
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	e000e010 	.word	0xe000e010

08000740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff49 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b086      	sub	sp, #24
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
 8000762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000768:	f7ff ff5e 	bl	8000628 <__NVIC_GetPriorityGrouping>
 800076c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	6978      	ldr	r0, [r7, #20]
 8000774:	f7ff ff90 	bl	8000698 <NVIC_EncodePriority>
 8000778:	4602      	mov	r2, r0
 800077a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff5f 	bl	8000644 <__NVIC_SetPriority>
}
 8000786:	bf00      	nop
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffb0 	bl	80006fc <SysTick_Config>
 800079c:	4603      	mov	r3, r0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e054      	b.n	8000864 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7f5b      	ldrb	r3, [r3, #29]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d105      	bne.n	80007d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2200      	movs	r2, #0
 80007c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f003 fd6a 	bl	80042a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2202      	movs	r2, #2
 80007d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	791b      	ldrb	r3, [r3, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d10c      	bne.n	80007f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a22      	ldr	r2, [pc, #136]	; (800086c <HAL_CRC_Init+0xc4>)
 80007e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	6892      	ldr	r2, [r2, #8]
 80007f0:	f022 0218 	bic.w	r2, r2, #24
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	e00c      	b.n	8000812 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6899      	ldr	r1, [r3, #8]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	461a      	mov	r2, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f000 f946 	bl	8000a94 <HAL_CRCEx_Polynomial_Set>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	e028      	b.n	8000864 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	795b      	ldrb	r3, [r3, #5]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d105      	bne.n	8000826 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	e004      	b.n	8000830 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	6912      	ldr	r2, [r2, #16]
 800082e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	687a      	ldr	r2, [r7, #4]
 8000836:	6812      	ldr	r2, [r2, #0]
 8000838:	6892      	ldr	r2, [r2, #8]
 800083a:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	6952      	ldr	r2, [r2, #20]
 8000842:	430a      	orrs	r2, r1
 8000844:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	6892      	ldr	r2, [r2, #8]
 8000850:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	6992      	ldr	r2, [r2, #24]
 8000858:	430a      	orrs	r2, r1
 800085a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2201      	movs	r2, #1
 8000860:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	04c11db7 	.word	0x04c11db7

08000870 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2202      	movs	r2, #2
 8000884:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	6812      	ldr	r2, [r2, #0]
 800088e:	6892      	ldr	r2, [r2, #8]
 8000890:	f042 0201 	orr.w	r2, r2, #1
 8000894:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6a1b      	ldr	r3, [r3, #32]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d022      	beq.n	80008e4 <HAL_CRC_Calculate+0x74>
 800089e:	2b03      	cmp	r3, #3
 80008a0:	d002      	beq.n	80008a8 <HAL_CRC_Calculate+0x38>
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d017      	beq.n	80008d6 <HAL_CRC_Calculate+0x66>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80008a6:	e024      	b.n	80008f2 <HAL_CRC_Calculate+0x82>
      for (index = 0U; index < BufferLength; index++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <HAL_CRC_Calculate+0x54>
        hcrc->Instance->DR = pBuffer[index];
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	68b9      	ldr	r1, [r7, #8]
 80008b8:	440a      	add	r2, r1
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d3f0      	bcc.n	80008ae <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	613b      	str	r3, [r7, #16]
      break;
 80008d4:	e00d      	b.n	80008f2 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	68f8      	ldr	r0, [r7, #12]
 80008dc:	f000 f811 	bl	8000902 <CRC_Handle_8>
 80008e0:	6138      	str	r0, [r7, #16]
      break;
 80008e2:	e006      	b.n	80008f2 <HAL_CRC_Calculate+0x82>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f000 f899 	bl	8000a20 <CRC_Handle_16>
 80008ee:	6138      	str	r0, [r7, #16]
      break;
 80008f0:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2201      	movs	r2, #1
 80008f6:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80008f8:	693b      	ldr	r3, [r7, #16]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3718      	adds	r7, #24
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8000902:	b480      	push	{r7}
 8000904:	b089      	sub	sp, #36	; 0x24
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	e022      	b.n	800095a <CRC_Handle_8+0x58>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	69fa      	ldr	r2, [r7, #28]
 800091a:	0092      	lsls	r2, r2, #2
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	440a      	add	r2, r1
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	0611      	lsls	r1, r2, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8000924:	69fa      	ldr	r2, [r7, #28]
 8000926:	0092      	lsls	r2, r2, #2
 8000928:	3201      	adds	r2, #1
 800092a:	68b8      	ldr	r0, [r7, #8]
 800092c:	4402      	add	r2, r0
 800092e:	7812      	ldrb	r2, [r2, #0]
 8000930:	0412      	lsls	r2, r2, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000932:	4311      	orrs	r1, r2
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8000934:	69fa      	ldr	r2, [r7, #28]
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	3202      	adds	r2, #2
 800093a:	68b8      	ldr	r0, [r7, #8]
 800093c:	4402      	add	r2, r0
 800093e:	7812      	ldrb	r2, [r2, #0]
 8000940:	0212      	lsls	r2, r2, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8000942:	430a      	orrs	r2, r1
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8000944:	69f9      	ldr	r1, [r7, #28]
 8000946:	0089      	lsls	r1, r1, #2
 8000948:	3103      	adds	r1, #3
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	4401      	add	r1, r0
 800094e:	7809      	ldrb	r1, [r1, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8000950:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8000952:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	3301      	adds	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	089a      	lsrs	r2, r3, #2
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8d7      	bhi.n	8000914 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d04f      	beq.n	8000a0e <CRC_Handle_8+0x10c>
  {
    if ((BufferLength % 4U) == 1U)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b01      	cmp	r3, #1
 8000976:	d108      	bne.n	800098a <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	68ba      	ldr	r2, [r7, #8]
 8000984:	4413      	add	r3, r2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	700b      	strb	r3, [r1, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b02      	cmp	r3, #2
 8000992:	d116      	bne.n	80009c2 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	68ba      	ldr	r2, [r7, #8]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	3301      	adds	r3, #1
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	440b      	add	r3, r1
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	8b7a      	ldrh	r2, [r7, #26]
 80009c0:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d120      	bne.n	8000a0e <CRC_Handle_8+0x10c>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	021b      	lsls	r3, r3, #8
 80009d8:	b21a      	sxth	r2, r3
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	3301      	adds	r3, #1
 80009e0:	68b9      	ldr	r1, [r7, #8]
 80009e2:	440b      	add	r3, r1
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	8b7a      	ldrh	r2, [r7, #26]
 80009f8:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4619      	mov	r1, r3
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	3302      	adds	r3, #2
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	700b      	strb	r3, [r1, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3724      	adds	r7, #36	; 0x24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e012      	b.n	8000a58 <CRC_Handle_16+0x38>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	440a      	add	r2, r1
 8000a3e:	8812      	ldrh	r2, [r2, #0]
 8000a40:	0412      	lsls	r2, r2, #16
 8000a42:	6979      	ldr	r1, [r7, #20]
 8000a44:	0089      	lsls	r1, r1, #2
 8000a46:	3102      	adds	r1, #2
 8000a48:	68b8      	ldr	r0, [r7, #8]
 8000a4a:	4401      	add	r1, r0
 8000a4c:	8809      	ldrh	r1, [r1, #0]
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	085a      	lsrs	r2, r3, #1
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d8e7      	bhi.n	8000a32 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d009      	beq.n	8000a80 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	4413      	add	r3, r2
 8000a7a:	881a      	ldrh	r2, [r3, #0]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	371c      	adds	r7, #28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000aa4:	231f      	movs	r3, #31
 8000aa6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000aa8:	bf00      	nop
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	1e5a      	subs	r2, r3, #1
 8000aae:	613a      	str	r2, [r7, #16]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d009      	beq.n	8000ac8 <HAL_CRCEx_Polynomial_Set+0x34>
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	f003 031f 	and.w	r3, r3, #31
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac0:	f003 0301 	and.w	r3, r3, #1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f0      	beq.n	8000aaa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b18      	cmp	r3, #24
 8000acc:	d846      	bhi.n	8000b5c <HAL_CRCEx_Polynomial_Set+0xc8>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000b63 	.word	0x08000b63
 8000ad8:	08000b5d 	.word	0x08000b5d
 8000adc:	08000b5d 	.word	0x08000b5d
 8000ae0:	08000b5d 	.word	0x08000b5d
 8000ae4:	08000b5d 	.word	0x08000b5d
 8000ae8:	08000b5d 	.word	0x08000b5d
 8000aec:	08000b5d 	.word	0x08000b5d
 8000af0:	08000b5d 	.word	0x08000b5d
 8000af4:	08000b51 	.word	0x08000b51
 8000af8:	08000b5d 	.word	0x08000b5d
 8000afc:	08000b5d 	.word	0x08000b5d
 8000b00:	08000b5d 	.word	0x08000b5d
 8000b04:	08000b5d 	.word	0x08000b5d
 8000b08:	08000b5d 	.word	0x08000b5d
 8000b0c:	08000b5d 	.word	0x08000b5d
 8000b10:	08000b5d 	.word	0x08000b5d
 8000b14:	08000b45 	.word	0x08000b45
 8000b18:	08000b5d 	.word	0x08000b5d
 8000b1c:	08000b5d 	.word	0x08000b5d
 8000b20:	08000b5d 	.word	0x08000b5d
 8000b24:	08000b5d 	.word	0x08000b5d
 8000b28:	08000b5d 	.word	0x08000b5d
 8000b2c:	08000b5d 	.word	0x08000b5d
 8000b30:	08000b5d 	.word	0x08000b5d
 8000b34:	08000b39 	.word	0x08000b39
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d913      	bls.n	8000b66 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b42:	e010      	b.n	8000b66 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	2b07      	cmp	r3, #7
 8000b48:	d90f      	bls.n	8000b6a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b4e:	e00c      	b.n	8000b6a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	2b0f      	cmp	r3, #15
 8000b54:	d90b      	bls.n	8000b6e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000b5a:	e008      	b.n	8000b6e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8000b60:	e006      	b.n	8000b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b62:	bf00      	nop
 8000b64:	e004      	b.n	8000b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b66:	bf00      	nop
 8000b68:	e002      	b.n	8000b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b6a:	bf00      	nop
 8000b6c:	e000      	b.n	8000b70 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000b6e:	bf00      	nop
  }
  if (status == HAL_OK)
 8000b70:	7dfb      	ldrb	r3, [r7, #23]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10d      	bne.n	8000b92 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	6892      	ldr	r2, [r2, #8]
 8000b88:	f022 0118 	bic.w	r1, r2, #24
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	371c      	adds	r7, #28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bae:	e166      	b.n	8000e7e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 8158 	beq.w	8000e78 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d003      	beq.n	8000bd8 <HAL_GPIO_Init+0x38>
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b12      	cmp	r3, #18
 8000bd6:	d123      	bne.n	8000c20 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	691a      	ldr	r2, [r3, #16]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	6939      	ldr	r1, [r7, #16]
 8000c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4013      	ands	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0203 	and.w	r2, r3, #3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d00b      	beq.n	8000c74 <HAL_GPIO_Init+0xd4>
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d007      	beq.n	8000c74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c68:	2b11      	cmp	r3, #17
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b12      	cmp	r3, #18
 8000c72:	d130      	bne.n	8000cd6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	68da      	ldr	r2, [r3, #12]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000caa:	2201      	movs	r2, #1
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	091b      	lsrs	r3, r3, #4
 8000cc0:	f003 0201 	and.w	r2, r3, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 80b2 	beq.w	8000e78 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d14:	4a61      	ldr	r2, [pc, #388]	; (8000e9c <HAL_GPIO_Init+0x2fc>)
 8000d16:	4b61      	ldr	r3, [pc, #388]	; (8000e9c <HAL_GPIO_Init+0x2fc>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	f043 0301 	orr.w	r3, r3, #1
 8000d1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000d20:	4b5e      	ldr	r3, [pc, #376]	; (8000e9c <HAL_GPIO_Init+0x2fc>)
 8000d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d2c:	4a5c      	ldr	r2, [pc, #368]	; (8000ea0 <HAL_GPIO_Init+0x300>)
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	220f      	movs	r2, #15
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d56:	d02b      	beq.n	8000db0 <HAL_GPIO_Init+0x210>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a52      	ldr	r2, [pc, #328]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d025      	beq.n	8000dac <HAL_GPIO_Init+0x20c>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a51      	ldr	r2, [pc, #324]	; (8000ea8 <HAL_GPIO_Init+0x308>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d01f      	beq.n	8000da8 <HAL_GPIO_Init+0x208>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a50      	ldr	r2, [pc, #320]	; (8000eac <HAL_GPIO_Init+0x30c>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d019      	beq.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4f      	ldr	r2, [pc, #316]	; (8000eb0 <HAL_GPIO_Init+0x310>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d013      	beq.n	8000da0 <HAL_GPIO_Init+0x200>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4e      	ldr	r2, [pc, #312]	; (8000eb4 <HAL_GPIO_Init+0x314>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d00d      	beq.n	8000d9c <HAL_GPIO_Init+0x1fc>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a4d      	ldr	r2, [pc, #308]	; (8000eb8 <HAL_GPIO_Init+0x318>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d007      	beq.n	8000d98 <HAL_GPIO_Init+0x1f8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_GPIO_Init+0x31c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d101      	bne.n	8000d94 <HAL_GPIO_Init+0x1f4>
 8000d90:	2307      	movs	r3, #7
 8000d92:	e00e      	b.n	8000db2 <HAL_GPIO_Init+0x212>
 8000d94:	2308      	movs	r3, #8
 8000d96:	e00c      	b.n	8000db2 <HAL_GPIO_Init+0x212>
 8000d98:	2306      	movs	r3, #6
 8000d9a:	e00a      	b.n	8000db2 <HAL_GPIO_Init+0x212>
 8000d9c:	2305      	movs	r3, #5
 8000d9e:	e008      	b.n	8000db2 <HAL_GPIO_Init+0x212>
 8000da0:	2304      	movs	r3, #4
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x212>
 8000da4:	2303      	movs	r3, #3
 8000da6:	e004      	b.n	8000db2 <HAL_GPIO_Init+0x212>
 8000da8:	2302      	movs	r3, #2
 8000daa:	e002      	b.n	8000db2 <HAL_GPIO_Init+0x212>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e000      	b.n	8000db2 <HAL_GPIO_Init+0x212>
 8000db0:	2300      	movs	r3, #0
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	f002 0203 	and.w	r2, r2, #3
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	4093      	lsls	r3, r2
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc2:	4937      	ldr	r1, [pc, #220]	; (8000ea0 <HAL_GPIO_Init+0x300>)
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000dd0:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <HAL_GPIO_Init+0x320>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000df4:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <HAL_GPIO_Init+0x320>)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <HAL_GPIO_Init+0x320>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e1e:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <HAL_GPIO_Init+0x320>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_GPIO_Init+0x320>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e48:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <HAL_GPIO_Init+0x320>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_GPIO_Init+0x320>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e72:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_GPIO_Init+0x320>)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f47f ae91 	bne.w	8000bb0 <HAL_GPIO_Init+0x10>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	371c      	adds	r7, #28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	48000800 	.word	0x48000800
 8000eac:	48000c00 	.word	0x48000c00
 8000eb0:	48001000 	.word	0x48001000
 8000eb4:	48001400 	.word	0x48001400
 8000eb8:	48001800 	.word	0x48001800
 8000ebc:	48001c00 	.word	0x48001c00
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691a      	ldr	r2, [r3, #16]
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000edc:	2301      	movs	r3, #1
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e001      	b.n	8000ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40007000 	.word	0x40007000

08000f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f1e:	d130      	bne.n	8000f82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f2c:	d038      	beq.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2232      	movs	r2, #50	; 0x32
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	0c9b      	lsrs	r3, r3, #18
 8000f50:	3301      	adds	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f54:	e002      	b.n	8000f5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f68:	d102      	bne.n	8000f70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f2      	bne.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7c:	d110      	bne.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e00f      	b.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8e:	d007      	beq.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f92:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40007000 	.word	0x40007000
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	431bde83 	.word	0x431bde83

08000fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e3db      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fce:	4ba4      	ldr	r3, [pc, #656]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd8:	4ba1      	ldr	r3, [pc, #644]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80e1 	beq.w	80011b2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <HAL_RCC_OscConfig+0x4a>
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b0c      	cmp	r3, #12
 8000ffa:	f040 8088 	bne.w	800110e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b01      	cmp	r3, #1
 8001002:	f040 8084 	bne.w	800110e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001006:	4b96      	ldr	r3, [pc, #600]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_RCC_OscConfig+0x62>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e3b3      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4b8f      	ldr	r3, [pc, #572]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_RCC_OscConfig+0x7c>
 800102e:	4b8c      	ldr	r3, [pc, #560]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001036:	e005      	b.n	8001044 <HAL_RCC_OscConfig+0x88>
 8001038:	4b89      	ldr	r3, [pc, #548]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800103a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001044:	429a      	cmp	r2, r3
 8001046:	d923      	bls.n	8001090 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fd47 	bl	8001ae0 <RCC_SetFlashLatencyFromMSIRange>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e394      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800105c:	4a80      	ldr	r2, [pc, #512]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800105e:	4b80      	ldr	r3, [pc, #512]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	497d      	ldr	r1, [pc, #500]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800106a:	4b7d      	ldr	r3, [pc, #500]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	4313      	orrs	r3, r2
 8001078:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107a:	4979      	ldr	r1, [pc, #484]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800107c:	4b78      	ldr	r3, [pc, #480]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	4313      	orrs	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
 800108e:	e022      	b.n	80010d6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001090:	4a73      	ldr	r2, [pc, #460]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001092:	4b73      	ldr	r3, [pc, #460]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4970      	ldr	r1, [pc, #448]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800109e:	4b70      	ldr	r3, [pc, #448]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ae:	496c      	ldr	r1, [pc, #432]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80010b0:	4b6b      	ldr	r3, [pc, #428]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fd0a 	bl	8001ae0 <RCC_SetFlashLatencyFromMSIRange>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e357      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010d6:	f000 fc41 	bl	800195c <HAL_RCC_GetSysClockFreq>
 80010da:	4601      	mov	r1, r0
 80010dc:	4b60      	ldr	r3, [pc, #384]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	4a5f      	ldr	r2, [pc, #380]	; (8001264 <HAL_RCC_OscConfig+0x2a8>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	fa21 f303 	lsr.w	r3, r1, r3
 80010f2:	4a5d      	ldr	r2, [pc, #372]	; (8001268 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010f6:	4b5d      	ldr	r3, [pc, #372]	; (800126c <HAL_RCC_OscConfig+0x2b0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa18 	bl	8000530 <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d052      	beq.n	80011b0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	e33b      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d032      	beq.n	800117c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001116:	4a52      	ldr	r2, [pc, #328]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001118:	4b51      	ldr	r3, [pc, #324]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001122:	f7ff fa51 	bl	80005c8 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800112a:	f7ff fa4d 	bl	80005c8 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e324      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800113c:	4b48      	ldr	r3, [pc, #288]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001148:	4a45      	ldr	r2, [pc, #276]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4942      	ldr	r1, [pc, #264]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001156:	4b42      	ldr	r3, [pc, #264]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001166:	493e      	ldr	r1, [pc, #248]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
 800117a:	e01a      	b.n	80011b2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800117c:	4a38      	ldr	r2, [pc, #224]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001188:	f7ff fa1e 	bl	80005c8 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001190:	f7ff fa1a 	bl	80005c8 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e2f1      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x1d4>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d074      	beq.n	80012a8 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_OscConfig+0x214>
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d10e      	bne.n	80011e8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d10b      	bne.n	80011e8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d064      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2ea>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d160      	bne.n	80012a6 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e2ce      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x244>
 80011f2:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0x280>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x268>
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0x280>
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <HAL_RCC_OscConfig+0x2a4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d01c      	beq.n	800127e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff f9c0 	bl	80005c8 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800124a:	e011      	b.n	8001270 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff f9bc 	bl	80005c8 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d90a      	bls.n	8001270 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e293      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	08004b2c 	.word	0x08004b2c
 8001268:	2000000c 	.word	0x2000000c
 800126c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001270:	4bae      	ldr	r3, [pc, #696]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0e7      	beq.n	800124c <HAL_RCC_OscConfig+0x290>
 800127c:	e014      	b.n	80012a8 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127e:	f7ff f9a3 	bl	80005c8 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001286:	f7ff f99f 	bl	80005c8 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b64      	cmp	r3, #100	; 0x64
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e276      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001298:	4ba4      	ldr	r3, [pc, #656]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f0      	bne.n	8001286 <HAL_RCC_OscConfig+0x2ca>
 80012a4:	e000      	b.n	80012a8 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d060      	beq.n	8001376 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d005      	beq.n	80012c6 <HAL_RCC_OscConfig+0x30a>
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b0c      	cmp	r3, #12
 80012be:	d119      	bne.n	80012f4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c6:	4b99      	ldr	r3, [pc, #612]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x322>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e253      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4993      	ldr	r1, [pc, #588]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80012e0:	4b92      	ldr	r3, [pc, #584]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	061b      	lsls	r3, r3, #24
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f2:	e040      	b.n	8001376 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d023      	beq.n	8001344 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4a8b      	ldr	r2, [pc, #556]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80012fe:	4b8b      	ldr	r3, [pc, #556]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff f95e 	bl	80005c8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff f95a 	bl	80005c8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e231      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001322:	4b82      	ldr	r3, [pc, #520]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	497f      	ldr	r1, [pc, #508]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001330:	4b7e      	ldr	r3, [pc, #504]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
 8001342:	e018      	b.n	8001376 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001344:	4a79      	ldr	r2, [pc, #484]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001346:	4b79      	ldr	r3, [pc, #484]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800134e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff f93a 	bl	80005c8 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff f936 	bl	80005c8 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e20d      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800136a:	4b70      	ldr	r3, [pc, #448]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d03c      	beq.n	80013fc <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4a68      	ldr	r2, [pc, #416]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800138c:	4b67      	ldr	r3, [pc, #412]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800138e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139a:	f7ff f915 	bl	80005c8 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff f911 	bl	80005c8 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1e8      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80013b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ef      	beq.n	80013a2 <HAL_RCC_OscConfig+0x3e6>
 80013c2:	e01b      	b.n	80013fc <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c4:	4a59      	ldr	r2, [pc, #356]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80013c6:	4b59      	ldr	r3, [pc, #356]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80013c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff f8f8 	bl	80005c8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff f8f4 	bl	80005c8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1cb      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ee:	4b4f      	ldr	r3, [pc, #316]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80013f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1ef      	bne.n	80013dc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a5 	beq.w	8001554 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800140e:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10d      	bne.n	8001436 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4a44      	ldr	r2, [pc, #272]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6593      	str	r3, [r2, #88]	; 0x58
 8001426:	4b41      	ldr	r3, [pc, #260]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001432:	2301      	movs	r3, #1
 8001434:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_OscConfig+0x574>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001442:	4a3b      	ldr	r2, [pc, #236]	; (8001530 <HAL_RCC_OscConfig+0x574>)
 8001444:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <HAL_RCC_OscConfig+0x574>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7ff f8bb 	bl	80005c8 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7ff f8b7 	bl	80005c8 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e18e      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001468:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_RCC_OscConfig+0x574>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d108      	bne.n	800148e <HAL_RCC_OscConfig+0x4d2>
 800147c:	4a2b      	ldr	r2, [pc, #172]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800148c:	e024      	b.n	80014d8 <HAL_RCC_OscConfig+0x51c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d110      	bne.n	80014b8 <HAL_RCC_OscConfig+0x4fc>
 8001496:	4a25      	ldr	r2, [pc, #148]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001498:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_OscConfig+0x570>)
 800149a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a6:	4a21      	ldr	r2, [pc, #132]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b6:	e00f      	b.n	80014d8 <HAL_RCC_OscConfig+0x51c>
 80014b8:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x570>)
 80014cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d0:	f023 0304 	bic.w	r3, r3, #4
 80014d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d016      	beq.n	800150e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff f872 	bl	80005c8 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014e6:	e00a      	b.n	80014fe <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e8:	f7ff f86e 	bl	80005c8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e143      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_OscConfig+0x570>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0ed      	beq.n	80014e8 <HAL_RCC_OscConfig+0x52c>
 800150c:	e019      	b.n	8001542 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff f85b 	bl	80005c8 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001514:	e00e      	b.n	8001534 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff f857 	bl	80005c8 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d905      	bls.n	8001534 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e12c      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
 800152c:	40021000 	.word	0x40021000
 8001530:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001534:	4b96      	ldr	r3, [pc, #600]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e9      	bne.n	8001516 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001542:	7ffb      	ldrb	r3, [r7, #31]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	4a91      	ldr	r2, [pc, #580]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800154a:	4b91      	ldr	r3, [pc, #580]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001552:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0320 	and.w	r3, r3, #32
 800155c:	2b00      	cmp	r3, #0
 800155e:	d03c      	beq.n	80015da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001568:	4a89      	ldr	r2, [pc, #548]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800156a:	4b89      	ldr	r3, [pc, #548]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800156c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff f826 	bl	80005c8 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001580:	f7ff f822 	bl	80005c8 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e0f9      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001592:	4b7f      	ldr	r3, [pc, #508]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 8001594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ef      	beq.n	8001580 <HAL_RCC_OscConfig+0x5c4>
 80015a0:	e01b      	b.n	80015da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015a2:	4a7b      	ldr	r2, [pc, #492]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80015a4:	4b7a      	ldr	r3, [pc, #488]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80015a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff f809 	bl	80005c8 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ba:	f7ff f805 	bl	80005c8 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0dc      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015cc:	4b70      	ldr	r3, [pc, #448]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80015ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ef      	bne.n	80015ba <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80d0 	beq.w	8001784 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	f000 808d 	beq.w	8001706 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d15a      	bne.n	80016aa <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f4:	4a66      	ldr	r2, [pc, #408]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80015f6:	4b66      	ldr	r3, [pc, #408]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7fe ffe2 	bl	80005c8 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7fe ffde 	bl	80005c8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0b5      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800161a:	4b5d      	ldr	r3, [pc, #372]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001626:	485a      	ldr	r0, [pc, #360]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 8001628:	4b59      	ldr	r3, [pc, #356]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_RCC_OscConfig+0x7d8>)
 800162e:	4013      	ands	r3, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001638:	3a01      	subs	r2, #1
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	4311      	orrs	r1, r2
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001642:	0212      	lsls	r2, r2, #8
 8001644:	4311      	orrs	r1, r2
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800164a:	0852      	lsrs	r2, r2, #1
 800164c:	3a01      	subs	r2, #1
 800164e:	0552      	lsls	r2, r2, #21
 8001650:	4311      	orrs	r1, r2
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001656:	0852      	lsrs	r2, r2, #1
 8001658:	3a01      	subs	r2, #1
 800165a:	0652      	lsls	r2, r2, #25
 800165c:	4311      	orrs	r1, r2
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001662:	06d2      	lsls	r2, r2, #27
 8001664:	430a      	orrs	r2, r1
 8001666:	4313      	orrs	r3, r2
 8001668:	60c3      	str	r3, [r0, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166a:	4a49      	ldr	r2, [pc, #292]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800166c:	4b48      	ldr	r3, [pc, #288]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001674:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001676:	4a46      	ldr	r2, [pc, #280]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 8001678:	4b45      	ldr	r3, [pc, #276]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001680:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7fe ffa1 	bl	80005c8 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168a:	f7fe ff9d 	bl	80005c8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e074      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169c:	4b3c      	ldr	r3, [pc, #240]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x6ce>
 80016a8:	e06c      	b.n	8001784 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4a39      	ldr	r2, [pc, #228]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80016ac:	4b38      	ldr	r3, [pc, #224]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d105      	bne.n	80016ce <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016c2:	4a33      	ldr	r2, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80016c4:	4b32      	ldr	r3, [pc, #200]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f023 0303 	bic.w	r3, r3, #3
 80016cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016ce:	4a30      	ldr	r2, [pc, #192]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80016d0:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7fe ff73 	bl	80005c8 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e6:	f7fe ff6f 	bl	80005c8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e046      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x72a>
 8001704:	e03e      	b.n	8001784 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e039      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001712:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <HAL_RCC_OscConfig+0x7d4>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0203 	and.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	429a      	cmp	r2, r3
 8001724:	d12c      	bne.n	8001780 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	3b01      	subs	r3, #1
 8001732:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d123      	bne.n	8001780 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001742:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d11b      	bne.n	8001780 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001752:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d113      	bne.n	8001780 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001762:	085b      	lsrs	r3, r3, #1
 8001764:	3b01      	subs	r3, #1
 8001766:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d109      	bne.n	8001780 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
 800177a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	019d808c 	.word	0x019d808c

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0c8      	b.n	800193e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_RCC_ClockConfig+0x1b0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0207 	and.w	r2, r3, #7
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d210      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4963      	ldr	r1, [pc, #396]	; (8001948 <HAL_RCC_ClockConfig+0x1b0>)
 80017bc:	4b62      	ldr	r3, [pc, #392]	; (8001948 <HAL_RCC_ClockConfig+0x1b0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 0207 	bic.w	r2, r3, #7
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ca:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <HAL_RCC_ClockConfig+0x1b0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0207 	and.w	r2, r3, #7
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e0b0      	b.n	800193e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d04c      	beq.n	8001882 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d107      	bne.n	8001800 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f0:	4b56      	ldr	r3, [pc, #344]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d121      	bne.n	8001840 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e09e      	b.n	800193e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d107      	bne.n	8001818 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001808:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d115      	bne.n	8001840 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e092      	b.n	800193e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d107      	bne.n	8001830 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001820:	4b4a      	ldr	r3, [pc, #296]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e086      	b.n	800193e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001830:	4b46      	ldr	r3, [pc, #280]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e07e      	b.n	800193e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001840:	4942      	ldr	r1, [pc, #264]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 8001842:	4b42      	ldr	r3, [pc, #264]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001852:	f7fe feb9 	bl	80005c8 <HAL_GetTick>
 8001856:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001858:	e00a      	b.n	8001870 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185a:	f7fe feb5 	bl	80005c8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e066      	b.n	800193e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001870:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 020c 	and.w	r2, r3, #12
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	429a      	cmp	r2, r3
 8001880:	d1eb      	bne.n	800185a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188e:	492f      	ldr	r1, [pc, #188]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 8001890:	4b2e      	ldr	r3, [pc, #184]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a0:	4b29      	ldr	r3, [pc, #164]	; (8001948 <HAL_RCC_ClockConfig+0x1b0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0207 	and.w	r2, r3, #7
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d910      	bls.n	80018d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4926      	ldr	r1, [pc, #152]	; (8001948 <HAL_RCC_ClockConfig+0x1b0>)
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_ClockConfig+0x1b0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 0207 	bic.w	r2, r3, #7
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_ClockConfig+0x1b0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0207 	and.w	r2, r3, #7
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e036      	b.n	800193e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d008      	beq.n	80018ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018dc:	491b      	ldr	r1, [pc, #108]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 80018de:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fa:	4914      	ldr	r1, [pc, #80]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4313      	orrs	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800190e:	f000 f825 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8001912:	4601      	mov	r1, r0
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_RCC_ClockConfig+0x1b4>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 8001920:	5cd3      	ldrb	r3, [r2, r3]
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	fa21 f303 	lsr.w	r3, r1, r3
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fdfc 	bl	8000530 <HAL_InitTick>
 8001938:	4603      	mov	r3, r0
 800193a:	72fb      	strb	r3, [r7, #11]

  return status;
 800193c:	7afb      	ldrb	r3, [r7, #11]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000
 800194c:	40021000 	.word	0x40021000
 8001950:	08004b2c 	.word	0x08004b2c
 8001954:	2000000c 	.word	0x2000000c
 8001958:	20000000 	.word	0x20000000

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x34>
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d121      	bne.n	80019ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d11e      	bne.n	80019ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d107      	bne.n	80019ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800199c:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a2:	0a1b      	lsrs	r3, r3, #8
 80019a4:	f003 030f 	and.w	r3, r3, #15
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e005      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019b8:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10d      	bne.n	80019e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	d102      	bne.n	80019da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	e004      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b08      	cmp	r3, #8
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019e0:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x110>)
 80019e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	2b0c      	cmp	r3, #12
 80019e8:	d133      	bne.n	8001a52 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d002      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0xa4>
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0xaa>
 80019fe:	e005      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a02:	617b      	str	r3, [r7, #20]
      break;
 8001a04:	e005      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001a08:	617b      	str	r3, [r7, #20]
      break;
 8001a0a:	e002      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	617b      	str	r3, [r7, #20]
      break;
 8001a10:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	fb02 f203 	mul.w	r2, r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0e5b      	lsrs	r3, r3, #25
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	3301      	adds	r3, #1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a52:	69bb      	ldr	r3, [r7, #24]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3724      	adds	r7, #36	; 0x24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000
 8001a64:	08004b44 	.word	0x08004b44
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	01312d00 	.word	0x01312d00

08001a70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000000c 	.word	0x2000000c

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001a90:	4601      	mov	r1, r0
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a9e:	5cd3      	ldrb	r3, [r2, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08004b3c 	.word	0x08004b3c

08001ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ab8:	f7ff ffda 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001abc:	4601      	mov	r1, r0
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08004b3c 	.word	0x08004b3c

08001ae0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001af8:	f7ff f9fc 	bl	8000ef4 <HAL_PWREx_GetVoltageRange>
 8001afc:	6178      	str	r0, [r7, #20]
 8001afe:	e014      	b.n	8001b2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b18:	f7ff f9ec 	bl	8000ef4 <HAL_PWREx_GetVoltageRange>
 8001b1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b20:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b30:	d10b      	bne.n	8001b4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b80      	cmp	r3, #128	; 0x80
 8001b36:	d919      	bls.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2ba0      	cmp	r3, #160	; 0xa0
 8001b3c:	d902      	bls.n	8001b44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b3e:	2302      	movs	r3, #2
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	e013      	b.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b44:	2301      	movs	r3, #1
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	e010      	b.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b80      	cmp	r3, #128	; 0x80
 8001b4e:	d902      	bls.n	8001b56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001b50:	2303      	movs	r3, #3
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	e00a      	b.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b80      	cmp	r3, #128	; 0x80
 8001b5a:	d102      	bne.n	8001b62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	e004      	b.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b70      	cmp	r3, #112	; 0x70
 8001b66:	d101      	bne.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b68:	2301      	movs	r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b6c:	490b      	ldr	r1, [pc, #44]	; (8001b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0207 	and.w	r2, r3, #7
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40022000 	.word	0x40022000

08001ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ba8:	2300      	movs	r3, #0
 8001baa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bac:	2300      	movs	r3, #0
 8001bae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d03f      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bc4:	d01c      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bca:	d802      	bhi.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001bd0:	e01f      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001bd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001bd6:	d003      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001bd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001bdc:	d01c      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001bde:	e018      	b.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001be0:	4a85      	ldr	r2, [pc, #532]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bec:	e015      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 facb 	bl	8002190 <RCCEx_PLLSAI1_Config>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001bfe:	e00c      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3320      	adds	r3, #32
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 fbb2 	bl	8002370 <RCCEx_PLLSAI2_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c10:	e003      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	74fb      	strb	r3, [r7, #19]
      break;
 8001c16:	e000      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001c18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c1a:	7cfb      	ldrb	r3, [r7, #19]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10b      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c20:	4975      	ldr	r1, [pc, #468]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c22:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c36:	e001      	b.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c38:	7cfb      	ldrb	r3, [r7, #19]
 8001c3a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d03f      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c50:	d01c      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001c52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c56:	d802      	bhi.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00e      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001c5c:	e01f      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c62:	d003      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001c64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001c68:	d01c      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001c6a:	e018      	b.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c6c:	4a62      	ldr	r2, [pc, #392]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c6e:	4b62      	ldr	r3, [pc, #392]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c78:	e015      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 fa85 	bl	8002190 <RCCEx_PLLSAI1_Config>
 8001c86:	4603      	mov	r3, r0
 8001c88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c8a:	e00c      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3320      	adds	r3, #32
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 fb6c 	bl	8002370 <RCCEx_PLLSAI2_Config>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c9c:	e003      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ca2:	e000      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ca6:	7cfb      	ldrb	r3, [r7, #19]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10b      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cac:	4952      	ldr	r1, [pc, #328]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cae:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cc2:	e001      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cc4:	7cfb      	ldrb	r3, [r7, #19]
 8001cc6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a0 	beq.w	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001cda:	4b47      	ldr	r3, [pc, #284]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001cea:	2300      	movs	r3, #0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00d      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4a41      	ldr	r2, [pc, #260]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cf2:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfc:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d0c:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d0e:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d18:	f7fe fc56 	bl	80005c8 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d1e:	e009      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d20:	f7fe fc52 	bl	80005c8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d902      	bls.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	74fb      	strb	r3, [r7, #19]
        break;
 8001d32:	e005      	b.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ef      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d15c      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d46:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d01f      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d019      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d64:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d70:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d80:	4a1d      	ldr	r2, [pc, #116]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d016      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7fe fc11 	bl	80005c8 <HAL_GetTick>
 8001da6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da8:	e00b      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001daa:	f7fe fc0d 	bl	80005c8 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d902      	bls.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	74fb      	strb	r3, [r7, #19]
            break;
 8001dc0:	e006      	b.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ec      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001dee:	e009      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	74bb      	strb	r3, [r7, #18]
 8001df4:	e006      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e00:	7cfb      	ldrb	r3, [r7, #19]
 8001e02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e04:	7c7b      	ldrb	r3, [r7, #17]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0a:	4aa6      	ldr	r2, [pc, #664]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e0c:	4ba5      	ldr	r3, [pc, #660]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00a      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e22:	49a0      	ldr	r1, [pc, #640]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e24:	4b9f      	ldr	r3, [pc, #636]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e44:	4997      	ldr	r1, [pc, #604]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e46:	4b97      	ldr	r3, [pc, #604]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4c:	f023 020c 	bic.w	r2, r3, #12
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e66:	498f      	ldr	r1, [pc, #572]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e68:	4b8e      	ldr	r3, [pc, #568]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e88:	4986      	ldr	r1, [pc, #536]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e8a:	4b86      	ldr	r3, [pc, #536]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001eaa:	497e      	ldr	r1, [pc, #504]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001eac:	4b7d      	ldr	r3, [pc, #500]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0320 	and.w	r3, r3, #32
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ecc:	4975      	ldr	r1, [pc, #468]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001ece:	4b75      	ldr	r3, [pc, #468]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eee:	496d      	ldr	r1, [pc, #436]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001ef0:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f10:	4964      	ldr	r1, [pc, #400]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f12:	4b64      	ldr	r3, [pc, #400]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f32:	495c      	ldr	r1, [pc, #368]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f34:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f54:	4953      	ldr	r1, [pc, #332]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f56:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f76:	494b      	ldr	r1, [pc, #300]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f78:	4b4a      	ldr	r3, [pc, #296]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f98:	4942      	ldr	r1, [pc, #264]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fa0:	f023 0203 	bic.w	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d028      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fba:	493a      	ldr	r1, [pc, #232]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fda:	4a32      	ldr	r2, [pc, #200]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fe4:	60d3      	str	r3, [r2, #12]
 8001fe6:	e011      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f000 f8c9 	bl	8002190 <RCCEx_PLLSAI1_Config>
 8001ffe:	4603      	mov	r3, r0
 8002000:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002002:	7cfb      	ldrb	r3, [r7, #19]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d028      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002018:	4922      	ldr	r1, [pc, #136]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002020:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002036:	d106      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002038:	4a1a      	ldr	r2, [pc, #104]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002042:	60d3      	str	r3, [r2, #12]
 8002044:	e011      	b.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800204e:	d10c      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3304      	adds	r3, #4
 8002054:	2101      	movs	r1, #1
 8002056:	4618      	mov	r0, r3
 8002058:	f000 f89a 	bl	8002190 <RCCEx_PLLSAI1_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8002066:	7cfb      	ldrb	r3, [r7, #19]
 8002068:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d02a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002076:	490b      	ldr	r1, [pc, #44]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002094:	d108      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002096:	4a03      	ldr	r2, [pc, #12]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020a0:	60d3      	str	r3, [r2, #12]
 80020a2:	e013      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80020a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f869 	bl	8002190 <RCCEx_PLLSAI1_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020c2:	7cfb      	ldrb	r3, [r7, #19]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d02f      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020d8:	492c      	ldr	r1, [pc, #176]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80020da:	4b2c      	ldr	r3, [pc, #176]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80020dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020f6:	d10d      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3304      	adds	r3, #4
 80020fc:	2102      	movs	r1, #2
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f846 	bl	8002190 <RCCEx_PLLSAI1_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002108:	7cfb      	ldrb	r3, [r7, #19]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d014      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 800210e:	7cfb      	ldrb	r3, [r7, #19]
 8002110:	74bb      	strb	r3, [r7, #18]
 8002112:	e011      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800211c:	d10c      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3320      	adds	r3, #32
 8002122:	2102      	movs	r1, #2
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f923 	bl	8002370 <RCCEx_PLLSAI2_Config>
 800212a:	4603      	mov	r3, r0
 800212c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800212e:	7cfb      	ldrb	r3, [r7, #19]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00b      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002144:	4911      	ldr	r1, [pc, #68]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00b      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002168:	4908      	ldr	r1, [pc, #32]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002180:	7cbb      	ldrb	r3, [r7, #18]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000

08002190 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800219e:	4b73      	ldr	r3, [pc, #460]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d018      	beq.n	80021dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021aa:	4b70      	ldr	r3, [pc, #448]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0203 	and.w	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d10d      	bne.n	80021d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
       ||
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d009      	beq.n	80021d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80021c2:	4b6a      	ldr	r3, [pc, #424]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
       ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d044      	beq.n	8002260 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	73fb      	strb	r3, [r7, #15]
 80021da:	e041      	b.n	8002260 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d00c      	beq.n	80021fe <RCCEx_PLLSAI1_Config+0x6e>
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d013      	beq.n	8002210 <RCCEx_PLLSAI1_Config+0x80>
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d120      	bne.n	800222e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80021ec:	4b5f      	ldr	r3, [pc, #380]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d11d      	bne.n	8002234 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021fc:	e01a      	b.n	8002234 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021fe:	4b5b      	ldr	r3, [pc, #364]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002206:	2b00      	cmp	r3, #0
 8002208:	d116      	bne.n	8002238 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220e:	e013      	b.n	8002238 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002210:	4b56      	ldr	r3, [pc, #344]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10f      	bne.n	800223c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800222c:	e006      	b.n	800223c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
      break;
 8002232:	e004      	b.n	800223e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002234:	bf00      	nop
 8002236:	e002      	b.n	800223e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002238:	bf00      	nop
 800223a:	e000      	b.n	800223e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800223c:	bf00      	nop
    }

    if(status == HAL_OK)
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10d      	bne.n	8002260 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002244:	4849      	ldr	r0, [pc, #292]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002246:	4b49      	ldr	r3, [pc, #292]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	430b      	orrs	r3, r1
 800225c:	4313      	orrs	r3, r2
 800225e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d17c      	bne.n	8002360 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002266:	4a41      	ldr	r2, [pc, #260]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002268:	4b40      	ldr	r3, [pc, #256]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002272:	f7fe f9a9 	bl	80005c8 <HAL_GetTick>
 8002276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002278:	e009      	b.n	800228e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800227a:	f7fe f9a5 	bl	80005c8 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d902      	bls.n	800228e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	73fb      	strb	r3, [r7, #15]
        break;
 800228c:	e005      	b.n	800229a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ef      	bne.n	800227a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d15f      	bne.n	8002360 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d110      	bne.n	80022c8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022a6:	4831      	ldr	r0, [pc, #196]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80022b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6892      	ldr	r2, [r2, #8]
 80022b8:	0211      	lsls	r1, r2, #8
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	68d2      	ldr	r2, [r2, #12]
 80022be:	06d2      	lsls	r2, r2, #27
 80022c0:	430a      	orrs	r2, r1
 80022c2:	4313      	orrs	r3, r2
 80022c4:	6103      	str	r3, [r0, #16]
 80022c6:	e027      	b.n	8002318 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d112      	bne.n	80022f4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022ce:	4827      	ldr	r0, [pc, #156]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022d0:	4b26      	ldr	r3, [pc, #152]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80022d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6892      	ldr	r2, [r2, #8]
 80022e0:	0211      	lsls	r1, r2, #8
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6912      	ldr	r2, [r2, #16]
 80022e6:	0852      	lsrs	r2, r2, #1
 80022e8:	3a01      	subs	r2, #1
 80022ea:	0552      	lsls	r2, r2, #21
 80022ec:	430a      	orrs	r2, r1
 80022ee:	4313      	orrs	r3, r2
 80022f0:	6103      	str	r3, [r0, #16]
 80022f2:	e011      	b.n	8002318 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022f4:	481d      	ldr	r0, [pc, #116]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f6:	4b1d      	ldr	r3, [pc, #116]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80022fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6892      	ldr	r2, [r2, #8]
 8002306:	0211      	lsls	r1, r2, #8
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6952      	ldr	r2, [r2, #20]
 800230c:	0852      	lsrs	r2, r2, #1
 800230e:	3a01      	subs	r2, #1
 8002310:	0652      	lsls	r2, r2, #25
 8002312:	430a      	orrs	r2, r1
 8002314:	4313      	orrs	r3, r2
 8002316:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002322:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fe f950 	bl	80005c8 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800232a:	e009      	b.n	8002340 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800232c:	f7fe f94c 	bl	80005c8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d902      	bls.n	8002340 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	73fb      	strb	r3, [r7, #15]
          break;
 800233e:	e005      	b.n	800234c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0ef      	beq.n	800232c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002352:	4906      	ldr	r1, [pc, #24]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000

08002370 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800237e:	4b68      	ldr	r3, [pc, #416]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d018      	beq.n	80023bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800238a:	4b65      	ldr	r3, [pc, #404]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0203 	and.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d10d      	bne.n	80023b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
       ||
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80023a2:	4b5f      	ldr	r3, [pc, #380]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
       ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d044      	beq.n	8002440 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
 80023ba:	e041      	b.n	8002440 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d00c      	beq.n	80023de <RCCEx_PLLSAI2_Config+0x6e>
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d013      	beq.n	80023f0 <RCCEx_PLLSAI2_Config+0x80>
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d120      	bne.n	800240e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023cc:	4b54      	ldr	r3, [pc, #336]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11d      	bne.n	8002414 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023dc:	e01a      	b.n	8002414 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023de:	4b50      	ldr	r3, [pc, #320]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d116      	bne.n	8002418 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ee:	e013      	b.n	8002418 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023f0:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10f      	bne.n	800241c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023fc:	4b48      	ldr	r3, [pc, #288]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800240c:	e006      	b.n	800241c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      break;
 8002412:	e004      	b.n	800241e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002414:	bf00      	nop
 8002416:	e002      	b.n	800241e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002418:	bf00      	nop
 800241a:	e000      	b.n	800241e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800241c:	bf00      	nop
    }

    if(status == HAL_OK)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002424:	483e      	ldr	r0, [pc, #248]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	430b      	orrs	r3, r1
 800243c:	4313      	orrs	r3, r2
 800243e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d166      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002446:	4a36      	ldr	r2, [pc, #216]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002448:	4b35      	ldr	r3, [pc, #212]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002452:	f7fe f8b9 	bl	80005c8 <HAL_GetTick>
 8002456:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002458:	e009      	b.n	800246e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800245a:	f7fe f8b5 	bl	80005c8 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d902      	bls.n	800246e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	73fb      	strb	r3, [r7, #15]
        break;
 800246c:	e005      	b.n	800247a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ef      	bne.n	800245a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d149      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d110      	bne.n	80024a8 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002486:	4826      	ldr	r0, [pc, #152]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002488:	4b25      	ldr	r3, [pc, #148]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002490:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6892      	ldr	r2, [r2, #8]
 8002498:	0211      	lsls	r1, r2, #8
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68d2      	ldr	r2, [r2, #12]
 800249e:	06d2      	lsls	r2, r2, #27
 80024a0:	430a      	orrs	r2, r1
 80024a2:	4313      	orrs	r3, r2
 80024a4:	6143      	str	r3, [r0, #20]
 80024a6:	e011      	b.n	80024cc <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024a8:	481d      	ldr	r0, [pc, #116]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024aa:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6892      	ldr	r2, [r2, #8]
 80024ba:	0211      	lsls	r1, r2, #8
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6912      	ldr	r2, [r2, #16]
 80024c0:	0852      	lsrs	r2, r2, #1
 80024c2:	3a01      	subs	r2, #1
 80024c4:	0652      	lsls	r2, r2, #25
 80024c6:	430a      	orrs	r2, r1
 80024c8:	4313      	orrs	r3, r2
 80024ca:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80024cc:	4a14      	ldr	r2, [pc, #80]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe f876 	bl	80005c8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024de:	e009      	b.n	80024f4 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024e0:	f7fe f872 	bl	80005c8 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d902      	bls.n	80024f4 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	73fb      	strb	r3, [r7, #15]
          break;
 80024f2:	e005      	b.n	8002500 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ef      	beq.n	80024e0 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002506:	4906      	ldr	r1, [pc, #24]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <RCCEx_PLLSAI2_Config+0x1b0>)
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002514:	7bfb      	ldrb	r3, [r7, #15]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e07a      	b.n	800262c <HAL_SPI_Init+0x108>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f002 f8a9 	bl	80046a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800256c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002576:	d902      	bls.n	800257e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e002      	b.n	8002584 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800257e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002582:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800258c:	d007      	beq.n	800259e <HAL_SPI_Init+0x7a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002596:	d002      	beq.n	800259e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10b      	bne.n	80025be <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025ae:	d903      	bls.n	80025b8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
 80025b6:	e002      	b.n	80025be <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6851      	ldr	r1, [r2, #4]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6892      	ldr	r2, [r2, #8]
 80025ca:	4311      	orrs	r1, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6912      	ldr	r2, [r2, #16]
 80025d0:	4311      	orrs	r1, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6952      	ldr	r2, [r2, #20]
 80025d6:	4311      	orrs	r1, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6992      	ldr	r2, [r2, #24]
 80025dc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	69d2      	ldr	r2, [r2, #28]
 80025e6:	4311      	orrs	r1, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6a12      	ldr	r2, [r2, #32]
 80025ec:	4311      	orrs	r1, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6992      	ldr	r2, [r2, #24]
 80025fe:	0c12      	lsrs	r2, r2, #16
 8002600:	f002 0104 	and.w	r1, r2, #4
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002608:	4311      	orrs	r1, r2
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800260e:	4311      	orrs	r1, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	68d2      	ldr	r2, [r2, #12]
 8002614:	4311      	orrs	r1, r2
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e040      	b.n	80026c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f002 f9ae 	bl	80049b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	; 0x24
 8002660:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	6812      	ldr	r2, [r2, #0]
 800266c:	f022 0201 	bic.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8c0 	bl	80027f8 <UART_SetConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e022      	b.n	80026c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fbee 	bl	8002e6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	6852      	ldr	r2, [r2, #4]
 800269a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800269e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	6892      	ldr	r2, [r2, #8]
 80026aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fc75 	bl	8002fb0 <UART_CheckIdleState>
 80026c6:	4603      	mov	r3, r0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08a      	sub	sp, #40	; 0x28
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4613      	mov	r3, r2
 80026de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	f040 8081 	bne.w	80027ec <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_UART_Transmit+0x26>
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e079      	b.n	80027ee <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_UART_Transmit+0x38>
 8002704:	2302      	movs	r3, #2
 8002706:	e072      	b.n	80027ee <HAL_UART_Transmit+0x11e>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2221      	movs	r2, #33	; 0x21
 800271a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800271c:	f7fd ff54 	bl	80005c8 <HAL_GetTick>
 8002720:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	88fa      	ldrh	r2, [r7, #6]
 800272e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273a:	d108      	bne.n	800274e <HAL_UART_Transmit+0x7e>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d104      	bne.n	800274e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	e003      	b.n	8002756 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002756:	e02d      	b.n	80027b4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2200      	movs	r2, #0
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fc69 	bl	800303a <UART_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e03d      	b.n	80027ee <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	8812      	ldrh	r2, [r2, #0]
 8002780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002784:	b292      	uxth	r2, r2
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	3302      	adds	r3, #2
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e008      	b.n	80027a2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	b292      	uxth	r2, r2
 800279a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3301      	adds	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1cb      	bne.n	8002758 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2140      	movs	r1, #64	; 0x40
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fc35 	bl	800303a <UART_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e009      	b.n	80027ee <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027fc:	b088      	sub	sp, #32
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	4313      	orrs	r3, r2
 8002824:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6819      	ldr	r1, [r3, #0]
 8002830:	4bab      	ldr	r3, [pc, #684]	; (8002ae0 <UART_SetConfig+0x2e8>)
 8002832:	400b      	ands	r3, r1
 8002834:	69f9      	ldr	r1, [r7, #28]
 8002836:	430b      	orrs	r3, r1
 8002838:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	6852      	ldr	r2, [r2, #4]
 8002844:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	68d2      	ldr	r2, [r2, #12]
 800284c:	430a      	orrs	r2, r1
 800284e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4aa2      	ldr	r2, [pc, #648]	; (8002ae4 <UART_SetConfig+0x2ec>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	4313      	orrs	r3, r2
 8002868:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	6892      	ldr	r2, [r2, #8]
 8002874:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a99      	ldr	r2, [pc, #612]	; (8002ae8 <UART_SetConfig+0x2f0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d121      	bne.n	80028cc <UART_SetConfig+0xd4>
 8002888:	4b98      	ldr	r3, [pc, #608]	; (8002aec <UART_SetConfig+0x2f4>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b03      	cmp	r3, #3
 8002894:	d816      	bhi.n	80028c4 <UART_SetConfig+0xcc>
 8002896:	a201      	add	r2, pc, #4	; (adr r2, 800289c <UART_SetConfig+0xa4>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	080028ad 	.word	0x080028ad
 80028a0:	080028b9 	.word	0x080028b9
 80028a4:	080028b3 	.word	0x080028b3
 80028a8:	080028bf 	.word	0x080028bf
 80028ac:	2301      	movs	r3, #1
 80028ae:	76fb      	strb	r3, [r7, #27]
 80028b0:	e0e8      	b.n	8002a84 <UART_SetConfig+0x28c>
 80028b2:	2302      	movs	r3, #2
 80028b4:	76fb      	strb	r3, [r7, #27]
 80028b6:	e0e5      	b.n	8002a84 <UART_SetConfig+0x28c>
 80028b8:	2304      	movs	r3, #4
 80028ba:	76fb      	strb	r3, [r7, #27]
 80028bc:	e0e2      	b.n	8002a84 <UART_SetConfig+0x28c>
 80028be:	2308      	movs	r3, #8
 80028c0:	76fb      	strb	r3, [r7, #27]
 80028c2:	e0df      	b.n	8002a84 <UART_SetConfig+0x28c>
 80028c4:	2310      	movs	r3, #16
 80028c6:	76fb      	strb	r3, [r7, #27]
 80028c8:	bf00      	nop
 80028ca:	e0db      	b.n	8002a84 <UART_SetConfig+0x28c>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a87      	ldr	r2, [pc, #540]	; (8002af0 <UART_SetConfig+0x2f8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d134      	bne.n	8002940 <UART_SetConfig+0x148>
 80028d6:	4b85      	ldr	r3, [pc, #532]	; (8002aec <UART_SetConfig+0x2f4>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d829      	bhi.n	8002938 <UART_SetConfig+0x140>
 80028e4:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <UART_SetConfig+0xf4>)
 80028e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	08002921 	.word	0x08002921
 80028f0:	08002939 	.word	0x08002939
 80028f4:	08002939 	.word	0x08002939
 80028f8:	08002939 	.word	0x08002939
 80028fc:	0800292d 	.word	0x0800292d
 8002900:	08002939 	.word	0x08002939
 8002904:	08002939 	.word	0x08002939
 8002908:	08002939 	.word	0x08002939
 800290c:	08002927 	.word	0x08002927
 8002910:	08002939 	.word	0x08002939
 8002914:	08002939 	.word	0x08002939
 8002918:	08002939 	.word	0x08002939
 800291c:	08002933 	.word	0x08002933
 8002920:	2300      	movs	r3, #0
 8002922:	76fb      	strb	r3, [r7, #27]
 8002924:	e0ae      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002926:	2302      	movs	r3, #2
 8002928:	76fb      	strb	r3, [r7, #27]
 800292a:	e0ab      	b.n	8002a84 <UART_SetConfig+0x28c>
 800292c:	2304      	movs	r3, #4
 800292e:	76fb      	strb	r3, [r7, #27]
 8002930:	e0a8      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002932:	2308      	movs	r3, #8
 8002934:	76fb      	strb	r3, [r7, #27]
 8002936:	e0a5      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002938:	2310      	movs	r3, #16
 800293a:	76fb      	strb	r3, [r7, #27]
 800293c:	bf00      	nop
 800293e:	e0a1      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a6b      	ldr	r2, [pc, #428]	; (8002af4 <UART_SetConfig+0x2fc>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d120      	bne.n	800298c <UART_SetConfig+0x194>
 800294a:	4b68      	ldr	r3, [pc, #416]	; (8002aec <UART_SetConfig+0x2f4>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002954:	2b10      	cmp	r3, #16
 8002956:	d00f      	beq.n	8002978 <UART_SetConfig+0x180>
 8002958:	2b10      	cmp	r3, #16
 800295a:	d802      	bhi.n	8002962 <UART_SetConfig+0x16a>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <UART_SetConfig+0x174>
 8002960:	e010      	b.n	8002984 <UART_SetConfig+0x18c>
 8002962:	2b20      	cmp	r3, #32
 8002964:	d005      	beq.n	8002972 <UART_SetConfig+0x17a>
 8002966:	2b30      	cmp	r3, #48	; 0x30
 8002968:	d009      	beq.n	800297e <UART_SetConfig+0x186>
 800296a:	e00b      	b.n	8002984 <UART_SetConfig+0x18c>
 800296c:	2300      	movs	r3, #0
 800296e:	76fb      	strb	r3, [r7, #27]
 8002970:	e088      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002972:	2302      	movs	r3, #2
 8002974:	76fb      	strb	r3, [r7, #27]
 8002976:	e085      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002978:	2304      	movs	r3, #4
 800297a:	76fb      	strb	r3, [r7, #27]
 800297c:	e082      	b.n	8002a84 <UART_SetConfig+0x28c>
 800297e:	2308      	movs	r3, #8
 8002980:	76fb      	strb	r3, [r7, #27]
 8002982:	e07f      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002984:	2310      	movs	r3, #16
 8002986:	76fb      	strb	r3, [r7, #27]
 8002988:	bf00      	nop
 800298a:	e07b      	b.n	8002a84 <UART_SetConfig+0x28c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a59      	ldr	r2, [pc, #356]	; (8002af8 <UART_SetConfig+0x300>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d120      	bne.n	80029d8 <UART_SetConfig+0x1e0>
 8002996:	4b55      	ldr	r3, [pc, #340]	; (8002aec <UART_SetConfig+0x2f4>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d00f      	beq.n	80029c4 <UART_SetConfig+0x1cc>
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d802      	bhi.n	80029ae <UART_SetConfig+0x1b6>
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <UART_SetConfig+0x1c0>
 80029ac:	e010      	b.n	80029d0 <UART_SetConfig+0x1d8>
 80029ae:	2b80      	cmp	r3, #128	; 0x80
 80029b0:	d005      	beq.n	80029be <UART_SetConfig+0x1c6>
 80029b2:	2bc0      	cmp	r3, #192	; 0xc0
 80029b4:	d009      	beq.n	80029ca <UART_SetConfig+0x1d2>
 80029b6:	e00b      	b.n	80029d0 <UART_SetConfig+0x1d8>
 80029b8:	2300      	movs	r3, #0
 80029ba:	76fb      	strb	r3, [r7, #27]
 80029bc:	e062      	b.n	8002a84 <UART_SetConfig+0x28c>
 80029be:	2302      	movs	r3, #2
 80029c0:	76fb      	strb	r3, [r7, #27]
 80029c2:	e05f      	b.n	8002a84 <UART_SetConfig+0x28c>
 80029c4:	2304      	movs	r3, #4
 80029c6:	76fb      	strb	r3, [r7, #27]
 80029c8:	e05c      	b.n	8002a84 <UART_SetConfig+0x28c>
 80029ca:	2308      	movs	r3, #8
 80029cc:	76fb      	strb	r3, [r7, #27]
 80029ce:	e059      	b.n	8002a84 <UART_SetConfig+0x28c>
 80029d0:	2310      	movs	r3, #16
 80029d2:	76fb      	strb	r3, [r7, #27]
 80029d4:	bf00      	nop
 80029d6:	e055      	b.n	8002a84 <UART_SetConfig+0x28c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a47      	ldr	r2, [pc, #284]	; (8002afc <UART_SetConfig+0x304>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d124      	bne.n	8002a2c <UART_SetConfig+0x234>
 80029e2:	4b42      	ldr	r3, [pc, #264]	; (8002aec <UART_SetConfig+0x2f4>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f0:	d012      	beq.n	8002a18 <UART_SetConfig+0x220>
 80029f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f6:	d802      	bhi.n	80029fe <UART_SetConfig+0x206>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <UART_SetConfig+0x214>
 80029fc:	e012      	b.n	8002a24 <UART_SetConfig+0x22c>
 80029fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a02:	d006      	beq.n	8002a12 <UART_SetConfig+0x21a>
 8002a04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a08:	d009      	beq.n	8002a1e <UART_SetConfig+0x226>
 8002a0a:	e00b      	b.n	8002a24 <UART_SetConfig+0x22c>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	76fb      	strb	r3, [r7, #27]
 8002a10:	e038      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a12:	2302      	movs	r3, #2
 8002a14:	76fb      	strb	r3, [r7, #27]
 8002a16:	e035      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a18:	2304      	movs	r3, #4
 8002a1a:	76fb      	strb	r3, [r7, #27]
 8002a1c:	e032      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a1e:	2308      	movs	r3, #8
 8002a20:	76fb      	strb	r3, [r7, #27]
 8002a22:	e02f      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a24:	2310      	movs	r3, #16
 8002a26:	76fb      	strb	r3, [r7, #27]
 8002a28:	bf00      	nop
 8002a2a:	e02b      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <UART_SetConfig+0x2ec>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d124      	bne.n	8002a80 <UART_SetConfig+0x288>
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <UART_SetConfig+0x2f4>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a44:	d012      	beq.n	8002a6c <UART_SetConfig+0x274>
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4a:	d802      	bhi.n	8002a52 <UART_SetConfig+0x25a>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <UART_SetConfig+0x268>
 8002a50:	e012      	b.n	8002a78 <UART_SetConfig+0x280>
 8002a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a56:	d006      	beq.n	8002a66 <UART_SetConfig+0x26e>
 8002a58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a5c:	d009      	beq.n	8002a72 <UART_SetConfig+0x27a>
 8002a5e:	e00b      	b.n	8002a78 <UART_SetConfig+0x280>
 8002a60:	2300      	movs	r3, #0
 8002a62:	76fb      	strb	r3, [r7, #27]
 8002a64:	e00e      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a66:	2302      	movs	r3, #2
 8002a68:	76fb      	strb	r3, [r7, #27]
 8002a6a:	e00b      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a6c:	2304      	movs	r3, #4
 8002a6e:	76fb      	strb	r3, [r7, #27]
 8002a70:	e008      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a72:	2308      	movs	r3, #8
 8002a74:	76fb      	strb	r3, [r7, #27]
 8002a76:	e005      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	76fb      	strb	r3, [r7, #27]
 8002a7c:	bf00      	nop
 8002a7e:	e001      	b.n	8002a84 <UART_SetConfig+0x28c>
 8002a80:	2310      	movs	r3, #16
 8002a82:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <UART_SetConfig+0x2ec>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	f040 80ed 	bne.w	8002c6a <UART_SetConfig+0x472>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a90:	7efb      	ldrb	r3, [r7, #27]
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d836      	bhi.n	8002b04 <UART_SetConfig+0x30c>
 8002a96:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <UART_SetConfig+0x2a4>)
 8002a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9c:	08002ac1 	.word	0x08002ac1
 8002aa0:	08002b05 	.word	0x08002b05
 8002aa4:	08002ac9 	.word	0x08002ac9
 8002aa8:	08002b05 	.word	0x08002b05
 8002aac:	08002acf 	.word	0x08002acf
 8002ab0:	08002b05 	.word	0x08002b05
 8002ab4:	08002b05 	.word	0x08002b05
 8002ab8:	08002b05 	.word	0x08002b05
 8002abc:	08002ad7 	.word	0x08002ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f7fe ffe2 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002ac4:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ac6:	e020      	b.n	8002b0a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002ac8:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <UART_SetConfig+0x308>)
 8002aca:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002acc:	e01d      	b.n	8002b0a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002ace:	f7fe ff45 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8002ad2:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ad4:	e019      	b.n	8002b0a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ada:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002adc:	e015      	b.n	8002b0a <UART_SetConfig+0x312>
 8002ade:	bf00      	nop
 8002ae0:	efff69f3 	.word	0xefff69f3
 8002ae4:	40008000 	.word	0x40008000
 8002ae8:	40013800 	.word	0x40013800
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40004400 	.word	0x40004400
 8002af4:	40004800 	.word	0x40004800
 8002af8:	40004c00 	.word	0x40004c00
 8002afc:	40005000 	.word	0x40005000
 8002b00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	74fb      	strb	r3, [r7, #19]
        break;
 8002b08:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 819e 	beq.w	8002e4e <UART_SetConfig+0x656>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	441a      	add	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d805      	bhi.n	8002b2e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d202      	bcs.n	8002b34 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	74fb      	strb	r3, [r7, #19]
 8002b32:	e18c      	b.n	8002e4e <UART_SetConfig+0x656>
      }
      else
      {
        switch (clocksource)
 8002b34:	7efb      	ldrb	r3, [r7, #27]
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	f200 8084 	bhi.w	8002c44 <UART_SetConfig+0x44c>
 8002b3c:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <UART_SetConfig+0x34c>)
 8002b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b69 	.word	0x08002b69
 8002b48:	08002c45 	.word	0x08002c45
 8002b4c:	08002ba9 	.word	0x08002ba9
 8002b50:	08002c45 	.word	0x08002c45
 8002b54:	08002bdd 	.word	0x08002bdd
 8002b58:	08002c45 	.word	0x08002c45
 8002b5c:	08002c45 	.word	0x08002c45
 8002b60:	08002c45 	.word	0x08002c45
 8002b64:	08002c1b 	.word	0x08002c1b
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b68:	f7fe ff8e 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f04f 0400 	mov.w	r4, #0
 8002b72:	ea4f 2904 	mov.w	r9, r4, lsl #8
 8002b76:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 8002b7a:	ea4f 2803 	mov.w	r8, r3, lsl #8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	f04f 0400 	mov.w	r4, #0
 8002b88:	eb18 0003 	adds.w	r0, r8, r3
 8002b8c:	eb49 0104 	adc.w	r1, r9, r4
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f04f 0400 	mov.w	r4, #0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	f7fd fb28 	bl	80001f0 <__aeabi_uldivmod>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ba6:	e050      	b.n	8002c4a <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	f04f 0400 	mov.w	r4, #0
 8002bb2:	49ad      	ldr	r1, [pc, #692]	; (8002e68 <UART_SetConfig+0x670>)
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	eb13 0801 	adds.w	r8, r3, r1
 8002bbc:	eb44 0902 	adc.w	r9, r4, r2
 8002bc0:	4640      	mov	r0, r8
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f04f 0400 	mov.w	r4, #0
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4623      	mov	r3, r4
 8002bd0:	f7fd fb0e 	bl	80001f0 <__aeabi_uldivmod>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	460c      	mov	r4, r1
 8002bd8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002bda:	e036      	b.n	8002c4a <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002bdc:	f7fe febe 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	021d      	lsls	r5, r3, #8
 8002bea:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8002bee:	0214      	lsls	r4, r2, #8
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	18a0      	adds	r0, r4, r2
 8002bfe:	eb45 0103 	adc.w	r1, r5, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4623      	mov	r3, r4
 8002c0e:	f7fd faef 	bl	80001f0 <__aeabi_uldivmod>
 8002c12:	4603      	mov	r3, r0
 8002c14:	460c      	mov	r4, r1
 8002c16:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002c18:	e017      	b.n	8002c4a <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	f04f 0400 	mov.w	r4, #0
 8002c24:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002c28:	f144 0100 	adc.w	r1, r4, #0
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f04f 0400 	mov.w	r4, #0
 8002c34:	461a      	mov	r2, r3
 8002c36:	4623      	mov	r3, r4
 8002c38:	f7fd fada 	bl	80001f0 <__aeabi_uldivmod>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	460c      	mov	r4, r1
 8002c40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002c42:	e002      	b.n	8002c4a <UART_SetConfig+0x452>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	74fb      	strb	r3, [r7, #19]
            break;
 8002c48:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c50:	d308      	bcc.n	8002c64 <UART_SetConfig+0x46c>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c58:	d204      	bcs.n	8002c64 <UART_SetConfig+0x46c>
        {
          huart->Instance->BRR = usartdiv;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e0f4      	b.n	8002e4e <UART_SetConfig+0x656>
        }
        else
        {
          ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	74fb      	strb	r3, [r7, #19]
 8002c68:	e0f1      	b.n	8002e4e <UART_SetConfig+0x656>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c72:	d17e      	bne.n	8002d72 <UART_SetConfig+0x57a>
  {
    switch (clocksource)
 8002c74:	7efb      	ldrb	r3, [r7, #27]
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d85b      	bhi.n	8002d32 <UART_SetConfig+0x53a>
 8002c7a:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <UART_SetConfig+0x488>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002ca5 	.word	0x08002ca5
 8002c84:	08002cc3 	.word	0x08002cc3
 8002c88:	08002ce1 	.word	0x08002ce1
 8002c8c:	08002d33 	.word	0x08002d33
 8002c90:	08002cfd 	.word	0x08002cfd
 8002c94:	08002d33 	.word	0x08002d33
 8002c98:	08002d33 	.word	0x08002d33
 8002c9c:	08002d33 	.word	0x08002d33
 8002ca0:	08002d1b 	.word	0x08002d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ca4:	f7fe fef0 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	005a      	lsls	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cc0:	e03a      	b.n	8002d38 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002cc2:	f7fe fef7 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	005a      	lsls	r2, r3, #1
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cde:	e02b      	b.n	8002d38 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	085b      	lsrs	r3, r3, #1
 8002ce6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002cea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6852      	ldr	r2, [r2, #4]
 8002cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cfa:	e01d      	b.n	8002d38 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cfc:	f7fe fe2e 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8002d00:	4603      	mov	r3, r0
 8002d02:	005a      	lsls	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	085b      	lsrs	r3, r3, #1
 8002d0a:	441a      	add	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d18:	e00e      	b.n	8002d38 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d30:	e002      	b.n	8002d38 <UART_SetConfig+0x540>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	74fb      	strb	r3, [r7, #19]
        break;
 8002d36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b0f      	cmp	r3, #15
 8002d3c:	d916      	bls.n	8002d6c <UART_SetConfig+0x574>
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d44:	d212      	bcs.n	8002d6c <UART_SetConfig+0x574>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f023 030f 	bic.w	r3, r3, #15
 8002d4e:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	085b      	lsrs	r3, r3, #1
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	897b      	ldrh	r3, [r7, #10]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	897a      	ldrh	r2, [r7, #10]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	e070      	b.n	8002e4e <UART_SetConfig+0x656>
    }
    else
    {
      ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	74fb      	strb	r3, [r7, #19]
 8002d70:	e06d      	b.n	8002e4e <UART_SetConfig+0x656>
    }
  }
  else
  {
    switch (clocksource)
 8002d72:	7efb      	ldrb	r3, [r7, #27]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d859      	bhi.n	8002e2c <UART_SetConfig+0x634>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <UART_SetConfig+0x588>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002da5 	.word	0x08002da5
 8002d84:	08002dc1 	.word	0x08002dc1
 8002d88:	08002ddd 	.word	0x08002ddd
 8002d8c:	08002e2d 	.word	0x08002e2d
 8002d90:	08002df9 	.word	0x08002df9
 8002d94:	08002e2d 	.word	0x08002e2d
 8002d98:	08002e2d 	.word	0x08002e2d
 8002d9c:	08002e2d 	.word	0x08002e2d
 8002da0:	08002e15 	.word	0x08002e15
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002da4:	f7fe fe70 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dbe:	e038      	b.n	8002e32 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002dc0:	f7fe fe78 	bl	8001ab4 <HAL_RCC_GetPCLK2Freq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	441a      	add	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dda:	e02a      	b.n	8002e32 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002de6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6852      	ldr	r2, [r2, #4]
 8002dee:	fbb3 f3f2 	udiv	r3, r3, r2
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002df6:	e01c      	b.n	8002e32 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002df8:	f7fe fdb0 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	441a      	add	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e12:	e00e      	b.n	8002e32 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	085b      	lsrs	r3, r3, #1
 8002e1a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002e2a:	e002      	b.n	8002e32 <UART_SetConfig+0x63a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	74fb      	strb	r3, [r7, #19]
        break;
 8002e30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b0f      	cmp	r3, #15
 8002e36:	d908      	bls.n	8002e4a <UART_SetConfig+0x652>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3e:	d204      	bcs.n	8002e4a <UART_SetConfig+0x652>
    {
      huart->Instance->BRR = usartdiv;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	60da      	str	r2, [r3, #12]
 8002e48:	e001      	b.n	8002e4e <UART_SetConfig+0x656>
    }
    else
    {
      ret = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e66:	bf00      	nop
 8002e68:	f4240000 	.word	0xf4240000

08002e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	6852      	ldr	r2, [r2, #4]
 8002e8a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e92:	430a      	orrs	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	6852      	ldr	r2, [r2, #4]
 8002eac:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	6852      	ldr	r2, [r2, #4]
 8002ece:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	6852      	ldr	r2, [r2, #4]
 8002ef0:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	6892      	ldr	r2, [r2, #8]
 8002f12:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6892      	ldr	r2, [r2, #8]
 8002f34:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01a      	beq.n	8002f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	6852      	ldr	r2, [r2, #4]
 8002f56:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f6a:	d10a      	bne.n	8002f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	6852      	ldr	r2, [r2, #4]
 8002f76:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	6852      	ldr	r2, [r2, #4]
 8002f98:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002fbe:	f7fd fb03 	bl	80005c8 <HAL_GetTick>
 8002fc2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d10e      	bne.n	8002ff0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f82a 	bl	800303a <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e020      	b.n	8003032 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d10e      	bne.n	800301c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ffe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f814 	bl	800303a <UART_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e00a      	b.n	8003032 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	4613      	mov	r3, r2
 8003048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304a:	e02a      	b.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003052:	d026      	beq.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003054:	f7fd fab8 	bl	80005c8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	429a      	cmp	r2, r3
 8003062:	d802      	bhi.n	800306a <UART_WaitOnFlagUntilTimeout+0x30>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11b      	bne.n	80030a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003078:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	6892      	ldr	r2, [r2, #8]
 8003084:	f022 0201 	bic.w	r2, r2, #1
 8003088:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e00f      	b.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	401a      	ands	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	bf0c      	ite	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	2300      	movne	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d0c5      	beq.n	800304c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80030d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030dc:	2b84      	cmp	r3, #132	; 0x84
 80030de:	d005      	beq.n	80030ec <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80030e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	3303      	adds	r3, #3
 80030ea:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80030ec:	68fb      	ldr	r3, [r7, #12]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80030fe:	f000 fdc1 	bl	8003c84 <vTaskStartScheduler>
  
  return osOK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}

08003108 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	b087      	sub	sp, #28
 800310c:	af02      	add	r7, sp, #8
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685c      	ldr	r4, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800311e:	b29e      	uxth	r6, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ffcf 	bl	80030ca <makeFreeRtosPriority>
 800312c:	4602      	mov	r2, r0
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	9200      	str	r2, [sp, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	4632      	mov	r2, r6
 800313a:	4629      	mov	r1, r5
 800313c:	4620      	mov	r0, r4
 800313e:	f000 fc77 	bl	8003a30 <xTaskCreate>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d001      	beq.n	800314c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800314c:	68fb      	ldr	r3, [r7, #12]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003156 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800315a:	f001 f863 	bl	8004224 <xTaskGetSchedulerState>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d001      	beq.n	8003168 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8003164:	f000 fa40 	bl	80035e8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}

0800316c <osDelayUntil>:
*          prior to its first use (PreviousWakeTime = osKernelSysTick() )
* @param   millisec    time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelayUntil (uint32_t *PreviousWakeTime, uint32_t millisec)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  return osOK;
#else
  (void) millisec;
  (void) PreviousWakeTime;
  
  return osErrorResource;
 8003176:	2381      	movs	r3, #129	; 0x81
#endif
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f103 0208 	add.w	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800319c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f103 0208 	add.w	r2, r3, #8
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f103 0208 	add.w	r2, r3, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031de:	b480      	push	{r7}
 80031e0:	b085      	sub	sp, #20
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6892      	ldr	r2, [r2, #8]
 800323c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6852      	ldr	r2, [r2, #4]
 8003246:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	429a      	cmp	r2, r3
 8003250:	d103      	bne.n	800325a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	1e5a      	subs	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3b04      	subs	r3, #4
 800328c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	3b04      	subs	r3, #4
 800329a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f023 0201 	bic.w	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3b04      	subs	r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <pxPortInitialiseStack+0x64>)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3b14      	subs	r3, #20
 80032b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3b04      	subs	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f06f 0202 	mvn.w	r2, #2
 80032ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3b20      	subs	r3, #32
 80032d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80032d2:	68fb      	ldr	r3, [r7, #12]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	080032e5 	.word	0x080032e5

080032e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <prvTaskExitError+0x50>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f6:	d009      	beq.n	800330c <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fc:	f383 8811 	msr	BASEPRI, r3
 8003300:	f3bf 8f6f 	isb	sy
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	e7fe      	b.n	800330a <prvTaskExitError+0x26>
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800331e:	bf00      	nop
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0fc      	beq.n	8003320 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	20000008 	.word	0x20000008
	...

08003340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <pxCurrentTCBConst2>)
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	6808      	ldr	r0, [r1, #0]
 8003346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800334a:	f380 8809 	msr	PSP, r0
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f04f 0000 	mov.w	r0, #0
 8003356:	f380 8811 	msr	BASEPRI, r0
 800335a:	4770      	bx	lr
 800335c:	f3af 8000 	nop.w

08003360 <pxCurrentTCBConst2>:
 8003360:	20000c04 	.word	0x20000c04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop

08003368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <prvPortStartFirstTask+0x24>)
 800336a:	6800      	ldr	r0, [r0, #0]
 800336c:	6800      	ldr	r0, [r0, #0]
 800336e:	f380 8808 	msr	MSP, r0
 8003372:	f04f 0000 	mov.w	r0, #0
 8003376:	f380 8814 	msr	CONTROL, r0
 800337a:	b662      	cpsie	i
 800337c:	b661      	cpsie	f
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	df00      	svc	0
 8003388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800338a:	bf00      	nop
 800338c:	e000ed08 	.word	0xe000ed08

08003390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003396:	4b44      	ldr	r3, [pc, #272]	; (80034a8 <xPortStartScheduler+0x118>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a44      	ldr	r2, [pc, #272]	; (80034ac <xPortStartScheduler+0x11c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d109      	bne.n	80033b4 <xPortStartScheduler+0x24>
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	e7fe      	b.n	80033b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033b4:	4b3c      	ldr	r3, [pc, #240]	; (80034a8 <xPortStartScheduler+0x118>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a3d      	ldr	r2, [pc, #244]	; (80034b0 <xPortStartScheduler+0x120>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d109      	bne.n	80033d2 <xPortStartScheduler+0x42>
 80033be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	e7fe      	b.n	80033d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033d2:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <xPortStartScheduler+0x124>)
 80033d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	22ff      	movs	r2, #255	; 0xff
 80033e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <xPortStartScheduler+0x128>)
 80033f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80033fa:	4b30      	ldr	r3, [pc, #192]	; (80034bc <xPortStartScheduler+0x12c>)
 80033fc:	2207      	movs	r2, #7
 80033fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003400:	e009      	b.n	8003416 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003402:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <xPortStartScheduler+0x12c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3b01      	subs	r3, #1
 8003408:	4a2c      	ldr	r2, [pc, #176]	; (80034bc <xPortStartScheduler+0x12c>)
 800340a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b80      	cmp	r3, #128	; 0x80
 8003420:	d0ef      	beq.n	8003402 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003422:	4b26      	ldr	r3, [pc, #152]	; (80034bc <xPortStartScheduler+0x12c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f1c3 0307 	rsb	r3, r3, #7
 800342a:	2b04      	cmp	r3, #4
 800342c:	d009      	beq.n	8003442 <xPortStartScheduler+0xb2>
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	e7fe      	b.n	8003440 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003442:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <xPortStartScheduler+0x12c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <xPortStartScheduler+0x12c>)
 800344a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800344c:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <xPortStartScheduler+0x12c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003454:	4a19      	ldr	r2, [pc, #100]	; (80034bc <xPortStartScheduler+0x12c>)
 8003456:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003460:	4a17      	ldr	r2, [pc, #92]	; (80034c0 <xPortStartScheduler+0x130>)
 8003462:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <xPortStartScheduler+0x130>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800346a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800346c:	4a14      	ldr	r2, [pc, #80]	; (80034c0 <xPortStartScheduler+0x130>)
 800346e:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <xPortStartScheduler+0x130>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003476:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003478:	f000 f8d6 	bl	8003628 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800347c:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <xPortStartScheduler+0x134>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003482:	f000 f8f5 	bl	8003670 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <xPortStartScheduler+0x138>)
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <xPortStartScheduler+0x138>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003490:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003492:	f7ff ff69 	bl	8003368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003496:	f000 fdb1 	bl	8003ffc <vTaskSwitchContext>
	prvTaskExitError();
 800349a:	f7ff ff23 	bl	80032e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	e000ed00 	.word	0xe000ed00
 80034ac:	410fc271 	.word	0x410fc271
 80034b0:	410fc270 	.word	0x410fc270
 80034b4:	e000e400 	.word	0xe000e400
 80034b8:	2000002c 	.word	0x2000002c
 80034bc:	20000030 	.word	0x20000030
 80034c0:	e000ed20 	.word	0xe000ed20
 80034c4:	20000008 	.word	0x20000008
 80034c8:	e000ef34 	.word	0xe000ef34

080034cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80034e4:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <vPortEnterCritical+0x54>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <vPortEnterCritical+0x54>)
 80034ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80034ee:	4b0c      	ldr	r3, [pc, #48]	; (8003520 <vPortEnterCritical+0x54>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d10e      	bne.n	8003514 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <vPortEnterCritical+0x58>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <vPortEnterCritical+0x48>
 8003500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	e7fe      	b.n	8003512 <vPortEnterCritical+0x46>
	}
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	20000008 	.word	0x20000008
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <vPortExitCritical+0x4c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <vPortExitCritical+0x22>
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	e7fe      	b.n	8003548 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <vPortExitCritical+0x4c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3b01      	subs	r3, #1
 8003550:	4a08      	ldr	r2, [pc, #32]	; (8003574 <vPortExitCritical+0x4c>)
 8003552:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003554:	4b07      	ldr	r3, [pc, #28]	; (8003574 <vPortExitCritical+0x4c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d104      	bne.n	8003566 <vPortExitCritical+0x3e>
 800355c:	2300      	movs	r3, #0
 800355e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000008 	.word	0x20000008
	...

08003580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003580:	f3ef 8009 	mrs	r0, PSP
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <pxCurrentTCBConst>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	f01e 0f10 	tst.w	lr, #16
 8003590:	bf08      	it	eq
 8003592:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003596:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359a:	6010      	str	r0, [r2, #0]
 800359c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80035a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80035a4:	f380 8811 	msr	BASEPRI, r0
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f000 fd24 	bl	8003ffc <vTaskSwitchContext>
 80035b4:	f04f 0000 	mov.w	r0, #0
 80035b8:	f380 8811 	msr	BASEPRI, r0
 80035bc:	bc09      	pop	{r0, r3}
 80035be:	6819      	ldr	r1, [r3, #0]
 80035c0:	6808      	ldr	r0, [r1, #0]
 80035c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035c6:	f01e 0f10 	tst.w	lr, #16
 80035ca:	bf08      	it	eq
 80035cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80035d0:	f380 8809 	msr	PSP, r0
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	f3af 8000 	nop.w

080035e0 <pxCurrentTCBConst>:
 80035e0:	20000c04 	.word	0x20000c04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop

080035e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003600:	f000 fc40 	bl	8003e84 <xTaskIncrementTick>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <xPortSysTickHandler+0x3c>)
 800360c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	e000ed04 	.word	0xe000ed04

08003628 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <vPortSetupTimerInterrupt+0x34>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <vPortSetupTimerInterrupt+0x38>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <vPortSetupTimerInterrupt+0x3c>)
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <vPortSetupTimerInterrupt+0x40>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	490b      	ldr	r1, [pc, #44]	; (800366c <vPortSetupTimerInterrupt+0x44>)
 8003640:	fba1 1303 	umull	r1, r3, r1, r3
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	3b01      	subs	r3, #1
 8003648:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800364a:	4b04      	ldr	r3, [pc, #16]	; (800365c <vPortSetupTimerInterrupt+0x34>)
 800364c:	2207      	movs	r2, #7
 800364e:	601a      	str	r2, [r3, #0]
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000e010 	.word	0xe000e010
 8003660:	e000e018 	.word	0xe000e018
 8003664:	e000e014 	.word	0xe000e014
 8003668:	2000000c 	.word	0x2000000c
 800366c:	10624dd3 	.word	0x10624dd3

08003670 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003670:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003680 <vPortEnableVFP+0x10>
 8003674:	6801      	ldr	r1, [r0, #0]
 8003676:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800367a:	6001      	str	r1, [r0, #0]
 800367c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800367e:	bf00      	nop
 8003680:	e000ed88 	.word	0xe000ed88

08003684 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003690:	f000 fb3e 	bl	8003d10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003694:	4b57      	ldr	r3, [pc, #348]	; (80037f4 <pvPortMalloc+0x170>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800369c:	f000 f90c 	bl	80038b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036a0:	4b55      	ldr	r3, [pc, #340]	; (80037f8 <pvPortMalloc+0x174>)
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f040 808c 	bne.w	80037c6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01c      	beq.n	80036ee <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80036b4:	2208      	movs	r2, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d013      	beq.n	80036ee <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f023 0307 	bic.w	r3, r3, #7
 80036cc:	3308      	adds	r3, #8
 80036ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <pvPortMalloc+0x6a>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e7fe      	b.n	80036ec <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d068      	beq.n	80037c6 <pvPortMalloc+0x142>
 80036f4:	4b41      	ldr	r3, [pc, #260]	; (80037fc <pvPortMalloc+0x178>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d863      	bhi.n	80037c6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80036fe:	4b40      	ldr	r3, [pc, #256]	; (8003800 <pvPortMalloc+0x17c>)
 8003700:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003702:	4b3f      	ldr	r3, [pc, #252]	; (8003800 <pvPortMalloc+0x17c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003708:	e004      	b.n	8003714 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d203      	bcs.n	8003726 <pvPortMalloc+0xa2>
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f1      	bne.n	800370a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003726:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <pvPortMalloc+0x170>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	429a      	cmp	r2, r3
 800372e:	d04a      	beq.n	80037c6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2208      	movs	r2, #8
 8003736:	4413      	add	r3, r2
 8003738:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	6a3b      	ldr	r3, [r7, #32]
 8003740:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	1ad2      	subs	r2, r2, r3
 800374a:	2308      	movs	r3, #8
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	429a      	cmp	r2, r3
 8003750:	d91e      	bls.n	8003790 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <pvPortMalloc+0xf4>
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	e7fe      	b.n	8003776 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800378a:	69b8      	ldr	r0, [r7, #24]
 800378c:	f000 f8f6 	bl	800397c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003790:	4b1a      	ldr	r3, [pc, #104]	; (80037fc <pvPortMalloc+0x178>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	4a18      	ldr	r2, [pc, #96]	; (80037fc <pvPortMalloc+0x178>)
 800379c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800379e:	4b17      	ldr	r3, [pc, #92]	; (80037fc <pvPortMalloc+0x178>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	4b18      	ldr	r3, [pc, #96]	; (8003804 <pvPortMalloc+0x180>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d203      	bcs.n	80037b2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80037aa:	4b14      	ldr	r3, [pc, #80]	; (80037fc <pvPortMalloc+0x178>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a15      	ldr	r2, [pc, #84]	; (8003804 <pvPortMalloc+0x180>)
 80037b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <pvPortMalloc+0x174>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80037c6:	f000 fab1 	bl	8003d2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <pvPortMalloc+0x164>
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	e7fe      	b.n	80037e6 <pvPortMalloc+0x162>
	return pvReturn;
 80037e8:	69fb      	ldr	r3, [r7, #28]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3728      	adds	r7, #40	; 0x28
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000bf4 	.word	0x20000bf4
 80037f8:	20000c00 	.word	0x20000c00
 80037fc:	20000bf8 	.word	0x20000bf8
 8003800:	20000bec 	.word	0x20000bec
 8003804:	20000bfc 	.word	0x20000bfc

08003808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d046      	beq.n	80038a8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800381a:	2308      	movs	r3, #8
 800381c:	425b      	negs	r3, r3
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4413      	add	r3, r2
 8003822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	4b20      	ldr	r3, [pc, #128]	; (80038b0 <vPortFree+0xa8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4013      	ands	r3, r2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <vPortFree+0x42>
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e7fe      	b.n	8003848 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d009      	beq.n	8003866 <vPortFree+0x5e>
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	e7fe      	b.n	8003864 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <vPortFree+0xa8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4013      	ands	r3, r2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d019      	beq.n	80038a8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d115      	bne.n	80038a8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	685a      	ldr	r2, [r3, #4]
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <vPortFree+0xa8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	43db      	mvns	r3, r3
 8003886:	401a      	ands	r2, r3
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800388c:	f000 fa40 	bl	8003d10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <vPortFree+0xac>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4413      	add	r3, r2
 800389a:	4a06      	ldr	r2, [pc, #24]	; (80038b4 <vPortFree+0xac>)
 800389c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800389e:	6938      	ldr	r0, [r7, #16]
 80038a0:	f000 f86c 	bl	800397c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80038a4:	f000 fa42 	bl	8003d2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000c00 	.word	0x20000c00
 80038b4:	20000bf8 	.word	0x20000bf8

080038b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80038be:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80038c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <prvHeapInit+0xac>)
 80038c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3307      	adds	r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0307 	bic.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	4a1f      	ldr	r2, [pc, #124]	; (8003964 <prvHeapInit+0xac>)
 80038e8:	4413      	add	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038f0:	4a1d      	ldr	r2, [pc, #116]	; (8003968 <prvHeapInit+0xb0>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <prvHeapInit+0xb0>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	4413      	add	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003904:	2208      	movs	r2, #8
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 0307 	bic.w	r3, r3, #7
 8003912:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4a15      	ldr	r2, [pc, #84]	; (800396c <prvHeapInit+0xb4>)
 8003918:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <prvHeapInit+0xb4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <prvHeapInit+0xb4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	1ad2      	subs	r2, r2, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <prvHeapInit+0xb4>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <prvHeapInit+0xb8>)
 8003946:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a09      	ldr	r2, [pc, #36]	; (8003974 <prvHeapInit+0xbc>)
 800394e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <prvHeapInit+0xc0>)
 8003952:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003956:	601a      	str	r2, [r3, #0]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	20000034 	.word	0x20000034
 8003968:	20000bec 	.word	0x20000bec
 800396c:	20000bf4 	.word	0x20000bf4
 8003970:	20000bfc 	.word	0x20000bfc
 8003974:	20000bf8 	.word	0x20000bf8
 8003978:	20000c00 	.word	0x20000c00

0800397c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003984:	4b28      	ldr	r3, [pc, #160]	; (8003a28 <prvInsertBlockIntoFreeList+0xac>)
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	e002      	b.n	8003990 <prvInsertBlockIntoFreeList+0x14>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	429a      	cmp	r2, r3
 8003998:	d3f7      	bcc.n	800398a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d108      	bne.n	80039be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	441a      	add	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	441a      	add	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d118      	bne.n	8003a04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <prvInsertBlockIntoFreeList+0xb0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d00d      	beq.n	80039fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e008      	b.n	8003a0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <prvInsertBlockIntoFreeList+0xb0>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e003      	b.n	8003a0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d002      	beq.n	8003a1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000bec 	.word	0x20000bec
 8003a2c:	20000bf4 	.word	0x20000bf4

08003a30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	; 0x30
 8003a34:	af04      	add	r7, sp, #16
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fe1d 	bl	8003684 <pvPortMalloc>
 8003a4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00e      	beq.n	8003a70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a52:	2054      	movs	r0, #84	; 0x54
 8003a54:	f7ff fe16 	bl	8003684 <pvPortMalloc>
 8003a58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
 8003a66:	e005      	b.n	8003a74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a68:	6978      	ldr	r0, [r7, #20]
 8003a6a:	f7ff fecd 	bl	8003808 <vPortFree>
 8003a6e:	e001      	b.n	8003a74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d013      	beq.n	8003aa2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	9303      	str	r3, [sp, #12]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	9302      	str	r3, [sp, #8]
 8003a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a86:	9301      	str	r3, [sp, #4]
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 f80e 	bl	8003ab2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a96:	69f8      	ldr	r0, [r7, #28]
 8003a98:	f000 f88a 	bl	8003bb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e002      	b.n	8003aa8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
	}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b088      	sub	sp, #32
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003aca:	3b01      	subs	r3, #1
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	f023 0307 	bic.w	r3, r3, #7
 8003ad8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <prvInitialiseNewTask+0x46>
 8003ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae8:	f383 8811 	msr	BASEPRI, r3
 8003aec:	f3bf 8f6f 	isb	sy
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e7fe      	b.n	8003af6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	e012      	b.n	8003b24 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	4413      	add	r3, r2
 8003b04:	7819      	ldrb	r1, [r3, #0]
 8003b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3334      	adds	r3, #52	; 0x34
 8003b0e:	460a      	mov	r2, r1
 8003b10:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d006      	beq.n	8003b2c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d9e9      	bls.n	8003afe <prvInitialiseNewTask+0x4c>
 8003b2a:	e000      	b.n	8003b2e <prvInitialiseNewTask+0x7c>
		{
			break;
 8003b2c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d901      	bls.n	8003b40 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b3c:	2306      	movs	r3, #6
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	2200      	movs	r2, #0
 8003b50:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	3304      	adds	r3, #4
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fb34 	bl	80031c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	3318      	adds	r3, #24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fb2f 	bl	80031c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	f1c3 0207 	rsb	r2, r3, #7
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	2200      	movs	r2, #0
 8003b80:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	69b8      	ldr	r0, [r7, #24]
 8003b90:	f7ff fb74 	bl	800327c <pxPortInitialiseStack>
 8003b94:	4602      	mov	r2, r0
 8003b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b98:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ba6:	bf00      	nop
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bb8:	f7ff fc88 	bl	80034cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <prvAddNewTaskToReadyList+0xb8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	4a29      	ldr	r2, [pc, #164]	; (8003c68 <prvAddNewTaskToReadyList+0xb8>)
 8003bc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bc6:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bce:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bd4:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <prvAddNewTaskToReadyList+0xb8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d110      	bne.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bdc:	f000 fa80 	bl	80040e0 <prvInitialiseTaskLists>
 8003be0:	e00d      	b.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003be2:	4b23      	ldr	r3, [pc, #140]	; (8003c70 <prvAddNewTaskToReadyList+0xc0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d802      	bhi.n	8003bfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3301      	adds	r3, #1
 8003c04:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <prvAddNewTaskToReadyList+0xc4>)
 8003c06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <prvAddNewTaskToReadyList+0xc8>)
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	4613      	mov	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <prvAddNewTaskToReadyList+0xcc>)
 8003c28:	441a      	add	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4610      	mov	r0, r2
 8003c32:	f7ff fad4 	bl	80031de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c36:	f7ff fc77 	bl	8003528 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c3a:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <prvAddNewTaskToReadyList+0xc0>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00e      	beq.n	8003c60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <prvAddNewTaskToReadyList+0xbc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d207      	bcs.n	8003c60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <prvAddNewTaskToReadyList+0xd0>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c60:	bf00      	nop
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20000d04 	.word	0x20000d04
 8003c6c:	20000c04 	.word	0x20000c04
 8003c70:	20000d10 	.word	0x20000d10
 8003c74:	20000d20 	.word	0x20000d20
 8003c78:	20000d0c 	.word	0x20000d0c
 8003c7c:	20000c08 	.word	0x20000c08
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <vTaskStartScheduler+0x74>)
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2300      	movs	r3, #0
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	4919      	ldr	r1, [pc, #100]	; (8003cfc <vTaskStartScheduler+0x78>)
 8003c98:	4819      	ldr	r0, [pc, #100]	; (8003d00 <vTaskStartScheduler+0x7c>)
 8003c9a:	f7ff fec9 	bl	8003a30 <xTaskCreate>
 8003c9e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d115      	bne.n	8003cd2 <vTaskStartScheduler+0x4e>
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003cb8:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <vTaskStartScheduler+0x80>)
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003cc0:	4b11      	ldr	r3, [pc, #68]	; (8003d08 <vTaskStartScheduler+0x84>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003cc6:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <vTaskStartScheduler+0x88>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ccc:	f7ff fb60 	bl	8003390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cd0:	e00d      	b.n	8003cee <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd8:	d109      	bne.n	8003cee <vTaskStartScheduler+0x6a>
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	607b      	str	r3, [r7, #4]
 8003cec:	e7fe      	b.n	8003cec <vTaskStartScheduler+0x68>
}
 8003cee:	bf00      	nop
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000d28 	.word	0x20000d28
 8003cfc:	08004b00 	.word	0x08004b00
 8003d00:	080040b1 	.word	0x080040b1
 8003d04:	20000d24 	.word	0x20000d24
 8003d08:	20000d10 	.word	0x20000d10
 8003d0c:	20000d08 	.word	0x20000d08

08003d10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <vTaskSuspendAll+0x18>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	4a03      	ldr	r2, [pc, #12]	; (8003d28 <vTaskSuspendAll+0x18>)
 8003d1c:	6013      	str	r3, [r2, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	20000d2c 	.word	0x20000d2c

08003d2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d3a:	4b41      	ldr	r3, [pc, #260]	; (8003e40 <xTaskResumeAll+0x114>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <xTaskResumeAll+0x2a>
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	e7fe      	b.n	8003d54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d56:	f7ff fbb9 	bl	80034cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d5a:	4b39      	ldr	r3, [pc, #228]	; (8003e40 <xTaskResumeAll+0x114>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	4a37      	ldr	r2, [pc, #220]	; (8003e40 <xTaskResumeAll+0x114>)
 8003d62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d64:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <xTaskResumeAll+0x114>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d161      	bne.n	8003e30 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d6c:	4b35      	ldr	r3, [pc, #212]	; (8003e44 <xTaskResumeAll+0x118>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05d      	beq.n	8003e30 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d74:	e02e      	b.n	8003dd4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d76:	4b34      	ldr	r3, [pc, #208]	; (8003e48 <xTaskResumeAll+0x11c>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3318      	adds	r3, #24
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fa4f 	bl	8003226 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fa4a 	bl	8003226 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	2201      	movs	r2, #1
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <xTaskResumeAll+0x120>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <xTaskResumeAll+0x120>)
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <xTaskResumeAll+0x124>)
 8003db2:	441a      	add	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f7ff fa0f 	bl	80031de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <xTaskResumeAll+0x128>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003dce:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <xTaskResumeAll+0x12c>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <xTaskResumeAll+0x11c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1cc      	bne.n	8003d76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003de2:	f000 f9f9 	bl	80041d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <xTaskResumeAll+0x130>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d010      	beq.n	8003e14 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003df2:	f000 f847 	bl	8003e84 <xTaskIncrementTick>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003dfc:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <xTaskResumeAll+0x12c>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f1      	bne.n	8003df2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003e0e:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <xTaskResumeAll+0x130>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e14:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <xTaskResumeAll+0x12c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d009      	beq.n	8003e30 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <xTaskResumeAll+0x134>)
 8003e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e30:	f7ff fb7a 	bl	8003528 <vPortExitCritical>

	return xAlreadyYielded;
 8003e34:	68bb      	ldr	r3, [r7, #8]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000d2c 	.word	0x20000d2c
 8003e44:	20000d04 	.word	0x20000d04
 8003e48:	20000cc4 	.word	0x20000cc4
 8003e4c:	20000d0c 	.word	0x20000d0c
 8003e50:	20000c08 	.word	0x20000c08
 8003e54:	20000c04 	.word	0x20000c04
 8003e58:	20000d18 	.word	0x20000d18
 8003e5c:	20000d14 	.word	0x20000d14
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <xTaskGetTickCount+0x1c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e70:	687b      	ldr	r3, [r7, #4]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000d08 	.word	0x20000d08

08003e84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e8e:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <xTaskIncrementTick+0x14c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f040 808c 	bne.w	8003fb0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e98:	4b4e      	ldr	r3, [pc, #312]	; (8003fd4 <xTaskIncrementTick+0x150>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ea0:	4a4c      	ldr	r2, [pc, #304]	; (8003fd4 <xTaskIncrementTick+0x150>)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d11f      	bne.n	8003eec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003eac:	4b4a      	ldr	r3, [pc, #296]	; (8003fd8 <xTaskIncrementTick+0x154>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <xTaskIncrementTick+0x46>
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	e7fe      	b.n	8003ec8 <xTaskIncrementTick+0x44>
 8003eca:	4b43      	ldr	r3, [pc, #268]	; (8003fd8 <xTaskIncrementTick+0x154>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	4b42      	ldr	r3, [pc, #264]	; (8003fdc <xTaskIncrementTick+0x158>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a40      	ldr	r2, [pc, #256]	; (8003fd8 <xTaskIncrementTick+0x154>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <xTaskIncrementTick+0x158>)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b40      	ldr	r3, [pc, #256]	; (8003fe0 <xTaskIncrementTick+0x15c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	4a3e      	ldr	r2, [pc, #248]	; (8003fe0 <xTaskIncrementTick+0x15c>)
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	f000 f976 	bl	80041d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eec:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <xTaskIncrementTick+0x160>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d34d      	bcc.n	8003f92 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ef6:	4b38      	ldr	r3, [pc, #224]	; (8003fd8 <xTaskIncrementTick+0x154>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <xTaskIncrementTick+0x80>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <xTaskIncrementTick+0x82>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f0a:	4b36      	ldr	r3, [pc, #216]	; (8003fe4 <xTaskIncrementTick+0x160>)
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f10:	601a      	str	r2, [r3, #0]
					break;
 8003f12:	e03e      	b.n	8003f92 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f14:	4b30      	ldr	r3, [pc, #192]	; (8003fd8 <xTaskIncrementTick+0x154>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d203      	bcs.n	8003f34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <xTaskIncrementTick+0x160>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6013      	str	r3, [r2, #0]
						break;
 8003f32:	e02e      	b.n	8003f92 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff f974 	bl	8003226 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d004      	beq.n	8003f50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3318      	adds	r3, #24
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff f96b 	bl	8003226 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f54:	2201      	movs	r2, #1
 8003f56:	409a      	lsls	r2, r3
 8003f58:	4b23      	ldr	r3, [pc, #140]	; (8003fe8 <xTaskIncrementTick+0x164>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	4a22      	ldr	r2, [pc, #136]	; (8003fe8 <xTaskIncrementTick+0x164>)
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <xTaskIncrementTick+0x168>)
 8003f70:	441a      	add	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	3304      	adds	r3, #4
 8003f76:	4619      	mov	r1, r3
 8003f78:	4610      	mov	r0, r2
 8003f7a:	f7ff f930 	bl	80031de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	4b1b      	ldr	r3, [pc, #108]	; (8003ff0 <xTaskIncrementTick+0x16c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d3b4      	bcc.n	8003ef6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f90:	e7b1      	b.n	8003ef6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f92:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <xTaskIncrementTick+0x16c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	4914      	ldr	r1, [pc, #80]	; (8003fec <xTaskIncrementTick+0x168>)
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d907      	bls.n	8003fba <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003faa:	2301      	movs	r3, #1
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e004      	b.n	8003fba <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <xTaskIncrementTick+0x170>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	4a0f      	ldr	r2, [pc, #60]	; (8003ff4 <xTaskIncrementTick+0x170>)
 8003fb8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <xTaskIncrementTick+0x174>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003fc6:	697b      	ldr	r3, [r7, #20]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000d2c 	.word	0x20000d2c
 8003fd4:	20000d08 	.word	0x20000d08
 8003fd8:	20000cbc 	.word	0x20000cbc
 8003fdc:	20000cc0 	.word	0x20000cc0
 8003fe0:	20000d1c 	.word	0x20000d1c
 8003fe4:	20000d24 	.word	0x20000d24
 8003fe8:	20000d0c 	.word	0x20000d0c
 8003fec:	20000c08 	.word	0x20000c08
 8003ff0:	20000c04 	.word	0x20000c04
 8003ff4:	20000d14 	.word	0x20000d14
 8003ff8:	20000d18 	.word	0x20000d18

08003ffc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004002:	4b26      	ldr	r3, [pc, #152]	; (800409c <vTaskSwitchContext+0xa0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800400a:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <vTaskSwitchContext+0xa4>)
 800400c:	2201      	movs	r2, #1
 800400e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004010:	e03e      	b.n	8004090 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004012:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <vTaskSwitchContext+0xa4>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004018:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <vTaskSwitchContext+0xa8>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004026:	7afb      	ldrb	r3, [r7, #11]
 8004028:	f1c3 031f 	rsb	r3, r3, #31
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	491e      	ldr	r1, [pc, #120]	; (80040a8 <vTaskSwitchContext+0xac>)
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	e7fe      	b.n	8004054 <vTaskSwitchContext+0x58>
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4a11      	ldr	r2, [pc, #68]	; (80040a8 <vTaskSwitchContext+0xac>)
 8004062:	4413      	add	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	605a      	str	r2, [r3, #4]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	3308      	adds	r3, #8
 8004078:	429a      	cmp	r2, r3
 800407a:	d104      	bne.n	8004086 <vTaskSwitchContext+0x8a>
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <vTaskSwitchContext+0xb0>)
 800408e:	6013      	str	r3, [r2, #0]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20000d2c 	.word	0x20000d2c
 80040a0:	20000d18 	.word	0x20000d18
 80040a4:	20000d0c 	.word	0x20000d0c
 80040a8:	20000c08 	.word	0x20000c08
 80040ac:	20000c04 	.word	0x20000c04

080040b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040b8:	f000 f852 	bl	8004160 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <prvIdleTask+0x28>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d9f9      	bls.n	80040b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <prvIdleTask+0x2c>)
 80040c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040d4:	e7f0      	b.n	80040b8 <prvIdleTask+0x8>
 80040d6:	bf00      	nop
 80040d8:	20000c08 	.word	0x20000c08
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	e00c      	b.n	8004106 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <prvInitialiseTaskLists+0x60>)
 80040f8:	4413      	add	r3, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff f842 	bl	8003184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3301      	adds	r3, #1
 8004104:	607b      	str	r3, [r7, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b06      	cmp	r3, #6
 800410a:	d9ef      	bls.n	80040ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800410c:	480d      	ldr	r0, [pc, #52]	; (8004144 <prvInitialiseTaskLists+0x64>)
 800410e:	f7ff f839 	bl	8003184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004112:	480d      	ldr	r0, [pc, #52]	; (8004148 <prvInitialiseTaskLists+0x68>)
 8004114:	f7ff f836 	bl	8003184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004118:	480c      	ldr	r0, [pc, #48]	; (800414c <prvInitialiseTaskLists+0x6c>)
 800411a:	f7ff f833 	bl	8003184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800411e:	480c      	ldr	r0, [pc, #48]	; (8004150 <prvInitialiseTaskLists+0x70>)
 8004120:	f7ff f830 	bl	8003184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004124:	480b      	ldr	r0, [pc, #44]	; (8004154 <prvInitialiseTaskLists+0x74>)
 8004126:	f7ff f82d 	bl	8003184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <prvInitialiseTaskLists+0x78>)
 800412c:	4a05      	ldr	r2, [pc, #20]	; (8004144 <prvInitialiseTaskLists+0x64>)
 800412e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004130:	4b0a      	ldr	r3, [pc, #40]	; (800415c <prvInitialiseTaskLists+0x7c>)
 8004132:	4a05      	ldr	r2, [pc, #20]	; (8004148 <prvInitialiseTaskLists+0x68>)
 8004134:	601a      	str	r2, [r3, #0]
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000c08 	.word	0x20000c08
 8004144:	20000c94 	.word	0x20000c94
 8004148:	20000ca8 	.word	0x20000ca8
 800414c:	20000cc4 	.word	0x20000cc4
 8004150:	20000cd8 	.word	0x20000cd8
 8004154:	20000cf0 	.word	0x20000cf0
 8004158:	20000cbc 	.word	0x20000cbc
 800415c:	20000cc0 	.word	0x20000cc0

08004160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004166:	e019      	b.n	800419c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004168:	f7ff f9b0 	bl	80034cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <prvCheckTasksWaitingTermination+0x4c>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff f854 	bl	8003226 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800417e:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <prvCheckTasksWaitingTermination+0x50>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3b01      	subs	r3, #1
 8004184:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <prvCheckTasksWaitingTermination+0x50>)
 8004186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <prvCheckTasksWaitingTermination+0x54>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3b01      	subs	r3, #1
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <prvCheckTasksWaitingTermination+0x54>)
 8004190:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004192:	f7ff f9c9 	bl	8003528 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f80e 	bl	80041b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <prvCheckTasksWaitingTermination+0x54>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e1      	bne.n	8004168 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	20000cd8 	.word	0x20000cd8
 80041b0:	20000d04 	.word	0x20000d04
 80041b4:	20000cec 	.word	0x20000cec

080041b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fb1f 	bl	8003808 <vPortFree>
			vPortFree( pxTCB );
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fb1c 	bl	8003808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041d0:	bf00      	nop
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041de:	4b0f      	ldr	r3, [pc, #60]	; (800421c <prvResetNextTaskUnblockTime+0x44>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <prvResetNextTaskUnblockTime+0x14>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <prvResetNextTaskUnblockTime+0x16>
 80041ec:	2300      	movs	r3, #0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041f2:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <prvResetNextTaskUnblockTime+0x48>)
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041fa:	e008      	b.n	800420e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041fc:	4b07      	ldr	r3, [pc, #28]	; (800421c <prvResetNextTaskUnblockTime+0x44>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4a05      	ldr	r2, [pc, #20]	; (8004220 <prvResetNextTaskUnblockTime+0x48>)
 800420c:	6013      	str	r3, [r2, #0]
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000cbc 	.word	0x20000cbc
 8004220:	20000d24 	.word	0x20000d24

08004224 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <xTaskGetSchedulerState+0x34>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004232:	2301      	movs	r3, #1
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	e008      	b.n	800424a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <xTaskGetSchedulerState+0x38>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004240:	2302      	movs	r3, #2
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	e001      	b.n	800424a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004246:	2300      	movs	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800424a:	687b      	ldr	r3, [r7, #4]
	}
 800424c:	4618      	mov	r0, r3
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	20000d10 	.word	0x20000d10
 800425c:	20000d2c 	.word	0x20000d2c

08004260 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <MX_CRC_Init+0x3c>)
 8004266:	4a0e      	ldr	r2, [pc, #56]	; (80042a0 <MX_CRC_Init+0x40>)
 8004268:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <MX_CRC_Init+0x3c>)
 800426c:	2200      	movs	r2, #0
 800426e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <MX_CRC_Init+0x3c>)
 8004272:	2200      	movs	r2, #0
 8004274:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <MX_CRC_Init+0x3c>)
 8004278:	2200      	movs	r2, #0
 800427a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800427c:	4b07      	ldr	r3, [pc, #28]	; (800429c <MX_CRC_Init+0x3c>)
 800427e:	2200      	movs	r2, #0
 8004280:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <MX_CRC_Init+0x3c>)
 8004284:	2201      	movs	r2, #1
 8004286:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004288:	4804      	ldr	r0, [pc, #16]	; (800429c <MX_CRC_Init+0x3c>)
 800428a:	f7fc fa8d 	bl	80007a8 <HAL_CRC_Init>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8004294:	f000 f93b 	bl	800450e <Error_Handler>
  }

}
 8004298:	bf00      	nop
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000d34 	.word	0x20000d34
 80042a0:	40023000 	.word	0x40023000

080042a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <HAL_CRC_MspInit+0x38>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d10b      	bne.n	80042ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042b6:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <HAL_CRC_MspInit+0x3c>)
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_CRC_MspInit+0x3c>)
 80042ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042c0:	6493      	str	r3, [r2, #72]	; 0x48
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_CRC_MspInit+0x3c>)
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40023000 	.word	0x40023000
 80042e0:	40021000 	.word	0x40021000

080042e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80042e4:	b5b0      	push	{r4, r5, r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of the switchStateTask */
  osThreadDef(switchStateTask, getSwitchState, osPriorityNormal, 0, 128);
 80042ea:	4b09      	ldr	r3, [pc, #36]	; (8004310 <MX_FREERTOS_Init+0x2c>)
 80042ec:	1d3c      	adds	r4, r7, #4
 80042ee:	461d      	mov	r5, r3
 80042f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042f4:	682b      	ldr	r3, [r5, #0]
 80042f6:	6023      	str	r3, [r4, #0]
  switchStateTaskHandle = osThreadCreate(osThread(switchStateTask), NULL);
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	2100      	movs	r1, #0
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe ff03 	bl	8003108 <osThreadCreate>
 8004302:	4602      	mov	r2, r0
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <MX_FREERTOS_Init+0x30>)
 8004306:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004308:	bf00      	nop
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bdb0      	pop	{r4, r5, r7, pc}
 8004310:	08004b18 	.word	0x08004b18
 8004314:	20000d5c 	.word	0x20000d5c

08004318 <getSwitchState>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void getSwitchState(void const * argument)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  uint32_t lastTickTime;
  char buf[MSG_LEN_SS];
  uint8_t switchStates = 0x0;
 8004320:	2300      	movs	r3, #0
 8004322:	77fb      	strb	r3, [r7, #31]
  lastTickTime = xTaskGetTickCount();
 8004324:	f7ff fd9e 	bl	8003e64 <xTaskGetTickCount>
 8004328:	4603      	mov	r3, r0
 800432a:	61bb      	str	r3, [r7, #24]
  for(;;)
  	  {
	  	  // TODO: Place holders
	  	  switchStates = getSwitchStates();
 800432c:	f000 fa7c 	bl	8004828 <getSwitchStates>
 8004330:	4603      	mov	r3, r0
 8004332:	77fb      	strb	r3, [r7, #31]
	      serializeSwitchStates(&buf, switchStates);    // Assemble Message
 8004334:	7ffa      	ldrb	r2, [r7, #31]
 8004336:	f107 030c 	add.w	r3, r7, #12
 800433a:	4611      	mov	r1, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f000 f8ed 	bl	800451c <serializeSwitchStates>
	  	  send_data(&buf, MSG_LEN_SS);				// Send message to UART
 8004342:	f107 030c 	add.w	r3, r7, #12
 8004346:	210c      	movs	r1, #12
 8004348:	4618      	mov	r0, r3
 800434a:	f000 f921 	bl	8004590 <send_data>
	  	  osDelayUntil(&lastTickTime, switchStatePeriod);
 800434e:	f107 0318 	add.w	r3, r7, #24
 8004352:	2132      	movs	r1, #50	; 0x32
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe ff09 	bl	800316c <osDelayUntil>
	  	  switchStates = getSwitchStates();
 800435a:	e7e7      	b.n	800432c <getSwitchState+0x14>

0800435c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004362:	f107 030c 	add.w	r3, r7, #12
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	605a      	str	r2, [r3, #4]
 800436c:	609a      	str	r2, [r3, #8]
 800436e:	60da      	str	r2, [r3, #12]
 8004370:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004372:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <MX_GPIO_Init+0x98>)
 8004374:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <MX_GPIO_Init+0x98>)
 8004376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <MX_GPIO_Init+0x98>)
 8004380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800438a:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <MX_GPIO_Init+0x98>)
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <MX_GPIO_Init+0x98>)
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004396:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <MX_GPIO_Init+0x98>)
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a2:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <MX_GPIO_Init+0x98>)
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <MX_GPIO_Init+0x98>)
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <MX_GPIO_Init+0x98>)
 80043b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = Camera_Pin|FwdRev_Pin|Fan_Pin|LP_Pin 
 80043ba:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80043be:	60fb      	str	r3, [r7, #12]
                          |Ignition_Pin|Array_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043c8:	f107 030c 	add.w	r3, r7, #12
 80043cc:	4619      	mov	r1, r3
 80043ce:	480a      	ldr	r0, [pc, #40]	; (80043f8 <MX_GPIO_Init+0x9c>)
 80043d0:	f7fc fbe6 	bl	8000ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Aux_Pin;
 80043d4:	2308      	movs	r3, #8
 80043d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Aux_GPIO_Port, &GPIO_InitStruct);
 80043e0:	f107 030c 	add.w	r3, r7, #12
 80043e4:	4619      	mov	r1, r3
 80043e6:	4805      	ldr	r0, [pc, #20]	; (80043fc <MX_GPIO_Init+0xa0>)
 80043e8:	f7fc fbda 	bl	8000ba0 <HAL_GPIO_Init>

}
 80043ec:	bf00      	nop
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	48000400 	.word	0x48000400
 80043fc:	48001c00 	.word	0x48001c00

08004400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004404:	f7fc f87c 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004408:	f000 f80f 	bl	800442a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800440c:	f7ff ffa6 	bl	800435c <MX_GPIO_Init>
  MX_SPI1_Init();
 8004410:	f000 f8d2 	bl	80045b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004414:	f000 f90a 	bl	800462c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8004418:	f000 fa9e 	bl	8004958 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800441c:	f7ff ff20 	bl	8004260 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8004420:	f7ff ff60 	bl	80042e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004424:	f7fe fe69 	bl	80030fa <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004428:	e7fe      	b.n	8004428 <main+0x28>

0800442a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b0ba      	sub	sp, #232	; 0xe8
 800442e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004430:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004434:	2244      	movs	r2, #68	; 0x44
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fb4d 	bl	8004ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800443e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	609a      	str	r2, [r3, #8]
 800444a:	60da      	str	r2, [r3, #12]
 800444c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	228c      	movs	r2, #140	; 0x8c
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fb3f 	bl	8004ad8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800445a:	2301      	movs	r3, #1
 800445c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004460:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004464:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004468:	2302      	movs	r3, #2
 800446a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800446e:	2303      	movs	r3, #3
 8004470:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 2;
 8004474:	2302      	movs	r3, #2
 8004476:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 16;
 800447a:	2310      	movs	r3, #16
 800447c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004480:	2302      	movs	r3, #2
 8004482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004486:	2302      	movs	r3, #2
 8004488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800448c:	2302      	movs	r3, #2
 800448e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004492:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004496:	4618      	mov	r0, r3
 8004498:	f7fc fd90 	bl	8000fbc <HAL_RCC_OscConfig>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80044a2:	f000 f834 	bl	800450e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044a6:	230f      	movs	r3, #15
 80044a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044ac:	2303      	movs	r3, #3
 80044ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044b2:	2300      	movs	r3, #0
 80044b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80044b8:	2300      	movs	r3, #0
 80044ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80044be:	2300      	movs	r3, #0
 80044c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80044c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80044c8:	2104      	movs	r1, #4
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd f964 	bl	8001798 <HAL_RCC_ClockConfig>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80044d6:	f000 f81a 	bl	800450e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80044da:	2302      	movs	r3, #2
 80044dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80044de:	2300      	movs	r3, #0
 80044e0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd fb5b 	bl	8001ba0 <HAL_RCCEx_PeriphCLKConfig>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80044f0:	f000 f80d 	bl	800450e <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80044f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80044f8:	f7fc fd0a 	bl	8000f10 <HAL_PWREx_ControlVoltageScaling>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8004502:	f000 f804 	bl	800450e <Error_Handler>
  }
}
 8004506:	bf00      	nop
 8004508:	37e8      	adds	r7, #232	; 0xe8
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <serializeSwitchStates>:
#include "serializer.h"
#include "string.h"
#include "crc.h"
#include "usart.h"

void serializeSwitchStates(uint8_t *buf, uint8_t switchStates){
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]

	buf[0] = '{';
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	227b      	movs	r2, #123	; 0x7b
 800452c:	701a      	strb	r2, [r3, #0]
	buf[1] = MODULE_CODE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3301      	adds	r3, #1
 8004532:	22a5      	movs	r2, #165	; 0xa5
 8004534:	701a      	strb	r2, [r3, #0]
	buf[2] = ',';
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3302      	adds	r3, #2
 800453a:	222c      	movs	r2, #44	; 0x2c
 800453c:	701a      	strb	r2, [r3, #0]
	buf[3] = DATA_IDENTIFIER;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3303      	adds	r3, #3
 8004542:	2204      	movs	r2, #4
 8004544:	701a      	strb	r2, [r3, #0]
	buf[4] = ',';
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3304      	adds	r3, #4
 800454a:	222c      	movs	r2, #44	; 0x2c
 800454c:	701a      	strb	r2, [r3, #0]
	buf[5] = switchStates;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3305      	adds	r3, #5
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	701a      	strb	r2, [r3, #0]
	buf[6] = ',';
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3306      	adds	r3, #6
 800455a:	222c      	movs	r2, #44	; 0x2c
 800455c:	701a      	strb	r2, [r3, #0]
	*((uint32_t *)(&(buf[7]))) = HAL_CRC_Calculate(&hcrc, &(buf[1]), 5); // CRC of buf[1] to buf[5]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	1ddc      	adds	r4, r3, #7
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3301      	adds	r3, #1
 8004566:	2205      	movs	r2, #5
 8004568:	4619      	mov	r1, r3
 800456a:	4808      	ldr	r0, [pc, #32]	; (800458c <serializeSwitchStates+0x70>)
 800456c:	f7fc f980 	bl	8000870 <HAL_CRC_Calculate>
 8004570:	4603      	mov	r3, r0
 8004572:	6023      	str	r3, [r4, #0]
	buf[11] = '}';
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	330b      	adds	r3, #11
 8004578:	227d      	movs	r2, #125	; 0x7d
 800457a:	701a      	strb	r2, [r3, #0]
	buf[12] = '\n';
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	330c      	adds	r3, #12
 8004580:	220a      	movs	r2, #10
 8004582:	701a      	strb	r2, [r3, #0]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bd90      	pop	{r4, r7, pc}
 800458c:	20000d34 	.word	0x20000d34

08004590 <send_data>:

void send_data(uint8_t* buf, uint8_t bufLen){
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart2, buf, bufLen, UART_TRANSMIT_TIMEOUT);
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	2303      	movs	r3, #3
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	4803      	ldr	r0, [pc, #12]	; (80045b4 <send_data+0x24>)
 80045a6:	f7fe f893 	bl	80026d0 <HAL_UART_Transmit>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000e28 	.word	0x20000e28

080045b8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045be:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <MX_SPI1_Init+0x70>)
 80045c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80045c2:	4b18      	ldr	r3, [pc, #96]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80045c8:	4b16      	ldr	r3, [pc, #88]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80045ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80045d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d8:	4b12      	ldr	r3, [pc, #72]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045ea:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <MX_SPI1_Init+0x6c>)
 80045fe:	2207      	movs	r2, #7
 8004600:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <MX_SPI1_Init+0x6c>)
 8004604:	2200      	movs	r2, #0
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <MX_SPI1_Init+0x6c>)
 800460a:	2200      	movs	r2, #0
 800460c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800460e:	4805      	ldr	r0, [pc, #20]	; (8004624 <MX_SPI1_Init+0x6c>)
 8004610:	f7fd ff88 	bl	8002524 <HAL_SPI_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 800461a:	f7ff ff78 	bl	800450e <Error_Handler>
  }

}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000dc4 	.word	0x20000dc4
 8004628:	40013000 	.word	0x40013000

0800462c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004632:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <MX_SPI2_Init+0x78>)
 8004634:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004636:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800463c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004640:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004644:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004648:	f44f 7240 	mov.w	r2, #768	; 0x300
 800464c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004650:	2200      	movs	r2, #0
 8004652:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004656:	2200      	movs	r2, #0
 8004658:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <MX_SPI2_Init+0x74>)
 800465c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004660:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004662:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004664:	2200      	movs	r2, #0
 8004666:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <MX_SPI2_Init+0x74>)
 800466a:	2200      	movs	r2, #0
 800466c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004670:	2200      	movs	r2, #0
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004674:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004676:	2200      	movs	r2, #0
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800467a:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <MX_SPI2_Init+0x74>)
 800467c:	2207      	movs	r2, #7
 800467e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <MX_SPI2_Init+0x74>)
 8004688:	2208      	movs	r2, #8
 800468a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800468c:	4804      	ldr	r0, [pc, #16]	; (80046a0 <MX_SPI2_Init+0x74>)
 800468e:	f7fd ff49 	bl	8002524 <HAL_SPI_Init>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8004698:	f7ff ff39 	bl	800450e <Error_Handler>
  }

}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000d60 	.word	0x20000d60
 80046a4:	40003800 	.word	0x40003800

080046a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b0:	f107 031c 	add.w	r3, r7, #28
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	609a      	str	r2, [r3, #8]
 80046bc:	60da      	str	r2, [r3, #12]
 80046be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2f      	ldr	r2, [pc, #188]	; (8004784 <HAL_SPI_MspInit+0xdc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d129      	bne.n	800471e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80046ca:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 80046cc:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 80046ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80046d4:	6613      	str	r3, [r2, #96]	; 0x60
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 80046d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e2:	4a29      	ldr	r2, [pc, #164]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 80046e4:	4b28      	ldr	r3, [pc, #160]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 80046e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ee:	4b26      	ldr	r3, [pc, #152]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 80046f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80046fa:	2370      	movs	r3, #112	; 0x70
 80046fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004706:	2303      	movs	r3, #3
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800470a:	2305      	movs	r3, #5
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470e:	f107 031c 	add.w	r3, r7, #28
 8004712:	4619      	mov	r1, r3
 8004714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004718:	f7fc fa42 	bl	8000ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800471c:	e02d      	b.n	800477a <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1a      	ldr	r2, [pc, #104]	; (800478c <HAL_SPI_MspInit+0xe4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d128      	bne.n	800477a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004728:	4a17      	ldr	r2, [pc, #92]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 800472a:	4b17      	ldr	r3, [pc, #92]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004732:	6593      	str	r3, [r2, #88]	; 0x58
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004740:	4a11      	ldr	r2, [pc, #68]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 8004742:	4b11      	ldr	r3, [pc, #68]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 8004744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <HAL_SPI_MspInit+0xe0>)
 800474e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8004758:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800475c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475e:	2302      	movs	r3, #2
 8004760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004762:	2300      	movs	r3, #0
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004766:	2303      	movs	r3, #3
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800476a:	2305      	movs	r3, #5
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800476e:	f107 031c 	add.w	r3, r7, #28
 8004772:	4619      	mov	r1, r3
 8004774:	4806      	ldr	r0, [pc, #24]	; (8004790 <HAL_SPI_MspInit+0xe8>)
 8004776:	f7fc fa13 	bl	8000ba0 <HAL_GPIO_Init>
}
 800477a:	bf00      	nop
 800477c:	3730      	adds	r7, #48	; 0x30
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40013000 	.word	0x40013000
 8004788:	40021000 	.word	0x40021000
 800478c:	40003800 	.word	0x40003800
 8004790:	48000400 	.word	0x48000400

08004794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479a:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <HAL_MspInit+0x4c>)
 800479c:	4b10      	ldr	r3, [pc, #64]	; (80047e0 <HAL_MspInit+0x4c>)
 800479e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	6613      	str	r3, [r2, #96]	; 0x60
 80047a6:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <HAL_MspInit+0x4c>)
 80047a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	607b      	str	r3, [r7, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047b2:	4a0b      	ldr	r2, [pc, #44]	; (80047e0 <HAL_MspInit+0x4c>)
 80047b4:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_MspInit+0x4c>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6593      	str	r3, [r2, #88]	; 0x58
 80047be:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <HAL_MspInit+0x4c>)
 80047c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	603b      	str	r3, [r7, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	210f      	movs	r1, #15
 80047ce:	f06f 0001 	mvn.w	r0, #1
 80047d2:	f7fb ffc0 	bl	8000756 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40021000 	.word	0x40021000

080047e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047f2:	b480      	push	{r7}
 80047f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047f6:	e7fe      	b.n	80047f6 <HardFault_Handler+0x4>

080047f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047fc:	e7fe      	b.n	80047fc <MemManage_Handler+0x4>

080047fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004802:	e7fe      	b.n	8004802 <BusFault_Handler+0x4>

08004804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004808:	e7fe      	b.n	8004808 <UsageFault_Handler+0x4>

0800480a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800480a:	b480      	push	{r7}
 800480c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800480e:	bf00      	nop
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800481c:	f7fb fec2 	bl	80005a4 <HAL_IncTick>
  osSystickHandler();
 8004820:	f7fe fc99 	bl	8003156 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004824:	bf00      	nop
 8004826:	bd80      	pop	{r7, pc}

08004828 <getSwitchStates>:
#include "FreeRTOS.h"
#include "string.h"
#include "gpio.h"
#include "main.h"

uint8_t getSwitchStates(){
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0

	// {0b0[1], SW7[1], SW6[1], SW5[1], SW4[1], SW3[1], SW2[1], SW1[1]}[8]
    uint8_t switchStates = 0x00;
 800482e:	2300      	movs	r3, #0
 8004830:	71fb      	strb	r3, [r7, #7]

    // Assemble switchStates byte using HAL pin-wise read
    switchStates |= HAL_GPIO_ReadPin(Camera_GPIO_Port, Camera_Pin) << 6;     // SW7
 8004832:	2110      	movs	r1, #16
 8004834:	482b      	ldr	r0, [pc, #172]	; (80048e4 <getSwitchStates+0xbc>)
 8004836:	f7fc fb45 	bl	8000ec4 <HAL_GPIO_ReadPin>
 800483a:	4603      	mov	r3, r0
 800483c:	019b      	lsls	r3, r3, #6
 800483e:	b25a      	sxtb	r2, r3
 8004840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004844:	4313      	orrs	r3, r2
 8004846:	b25b      	sxtb	r3, r3
 8004848:	71fb      	strb	r3, [r7, #7]
	switchStates |= HAL_GPIO_ReadPin(FwdRev_GPIO_Port, FwdRev_Pin) << 5;     // SW6
 800484a:	2120      	movs	r1, #32
 800484c:	4825      	ldr	r0, [pc, #148]	; (80048e4 <getSwitchStates+0xbc>)
 800484e:	f7fc fb39 	bl	8000ec4 <HAL_GPIO_ReadPin>
 8004852:	4603      	mov	r3, r0
 8004854:	015b      	lsls	r3, r3, #5
 8004856:	b25a      	sxtb	r2, r3
 8004858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485c:	4313      	orrs	r3, r2
 800485e:	b25b      	sxtb	r3, r3
 8004860:	71fb      	strb	r3, [r7, #7]
	switchStates |= HAL_GPIO_ReadPin(Fan_GPIO_Port, Fan_Pin) << 4;           // SW5
 8004862:	2140      	movs	r1, #64	; 0x40
 8004864:	481f      	ldr	r0, [pc, #124]	; (80048e4 <getSwitchStates+0xbc>)
 8004866:	f7fc fb2d 	bl	8000ec4 <HAL_GPIO_ReadPin>
 800486a:	4603      	mov	r3, r0
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	b25a      	sxtb	r2, r3
 8004870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004874:	4313      	orrs	r3, r2
 8004876:	b25b      	sxtb	r3, r3
 8004878:	71fb      	strb	r3, [r7, #7]
	switchStates |= HAL_GPIO_ReadPin(Array_GPIO_Port, Array_Pin) << 3;       // SW4
 800487a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800487e:	4819      	ldr	r0, [pc, #100]	; (80048e4 <getSwitchStates+0xbc>)
 8004880:	f7fc fb20 	bl	8000ec4 <HAL_GPIO_ReadPin>
 8004884:	4603      	mov	r3, r0
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	b25a      	sxtb	r2, r3
 800488a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800488e:	4313      	orrs	r3, r2
 8004890:	b25b      	sxtb	r3, r3
 8004892:	71fb      	strb	r3, [r7, #7]
	switchStates |= HAL_GPIO_ReadPin(Ignition_GPIO_Port, Ignition_Pin) << 2; // SW3
 8004894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004898:	4812      	ldr	r0, [pc, #72]	; (80048e4 <getSwitchStates+0xbc>)
 800489a:	f7fc fb13 	bl	8000ec4 <HAL_GPIO_ReadPin>
 800489e:	4603      	mov	r3, r0
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	b25a      	sxtb	r2, r3
 80048a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	b25b      	sxtb	r3, r3
 80048ac:	71fb      	strb	r3, [r7, #7]
	switchStates |= HAL_GPIO_ReadPin(Aux_GPIO_Port, Aux_Pin) << 1;           // SW2
 80048ae:	2108      	movs	r1, #8
 80048b0:	480d      	ldr	r0, [pc, #52]	; (80048e8 <getSwitchStates+0xc0>)
 80048b2:	f7fc fb07 	bl	8000ec4 <HAL_GPIO_ReadPin>
 80048b6:	4603      	mov	r3, r0
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	b25a      	sxtb	r2, r3
 80048bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	b25b      	sxtb	r3, r3
 80048c4:	71fb      	strb	r3, [r7, #7]
	switchStates |= HAL_GPIO_ReadPin(LP_GPIO_Port, LP_Pin);                  // SW1
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	4806      	ldr	r0, [pc, #24]	; (80048e4 <getSwitchStates+0xbc>)
 80048ca:	f7fc fafb 	bl	8000ec4 <HAL_GPIO_ReadPin>
 80048ce:	4603      	mov	r3, r0
 80048d0:	461a      	mov	r2, r3
 80048d2:	79fb      	ldrb	r3, [r7, #7]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]

	return switchStates;
 80048d8:	79fb      	ldrb	r3, [r7, #7]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	48000400 	.word	0x48000400
 80048e8:	48001c00 	.word	0x48001c00

080048ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048f0:	4a17      	ldr	r2, [pc, #92]	; (8004950 <SystemInit+0x64>)
 80048f2:	4b17      	ldr	r3, [pc, #92]	; (8004950 <SystemInit+0x64>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <SystemInit+0x68>)
 8004902:	4b14      	ldr	r3, [pc, #80]	; (8004954 <SystemInit+0x68>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f043 0301 	orr.w	r3, r3, #1
 800490a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <SystemInit+0x68>)
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004912:	4a10      	ldr	r2, [pc, #64]	; (8004954 <SystemInit+0x68>)
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <SystemInit+0x68>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800491c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004920:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <SystemInit+0x68>)
 8004924:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004928:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800492a:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <SystemInit+0x68>)
 800492c:	4b09      	ldr	r3, [pc, #36]	; (8004954 <SystemInit+0x68>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004934:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004936:	4b07      	ldr	r3, [pc, #28]	; (8004954 <SystemInit+0x68>)
 8004938:	2200      	movs	r2, #0
 800493a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800493c:	4b04      	ldr	r3, [pc, #16]	; (8004950 <SystemInit+0x64>)
 800493e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004942:	609a      	str	r2, [r3, #8]
#endif
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000ed00 	.word	0xe000ed00
 8004954:	40021000 	.word	0x40021000

08004958 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 800495e:	4a15      	ldr	r2, [pc, #84]	; (80049b4 <MX_USART2_UART_Init+0x5c>)
 8004960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004962:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 8004964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800496a:	4b11      	ldr	r3, [pc, #68]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 800496c:	2200      	movs	r2, #0
 800496e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 8004972:	2200      	movs	r2, #0
 8004974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 8004978:	2200      	movs	r2, #0
 800497a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 800497e:	220c      	movs	r2, #12
 8004980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 8004984:	2200      	movs	r2, #0
 8004986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 800498a:	2200      	movs	r2, #0
 800498c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800498e:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 8004990:	2200      	movs	r2, #0
 8004992:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 8004996:	2200      	movs	r2, #0
 8004998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800499a:	4805      	ldr	r0, [pc, #20]	; (80049b0 <MX_USART2_UART_Init+0x58>)
 800499c:	f7fd fe4a 	bl	8002634 <HAL_UART_Init>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80049a6:	f7ff fdb2 	bl	800450e <Error_Handler>
  }

}
 80049aa:	bf00      	nop
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000e28 	.word	0x20000e28
 80049b4:	40004400 	.word	0x40004400

080049b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c0:	f107 0314 	add.w	r3, r7, #20
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	605a      	str	r2, [r3, #4]
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	60da      	str	r2, [r3, #12]
 80049ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a17      	ldr	r2, [pc, #92]	; (8004a34 <HAL_UART_MspInit+0x7c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d128      	bne.n	8004a2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049da:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <HAL_UART_MspInit+0x80>)
 80049dc:	4b16      	ldr	r3, [pc, #88]	; (8004a38 <HAL_UART_MspInit+0x80>)
 80049de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e4:	6593      	str	r3, [r2, #88]	; 0x58
 80049e6:	4b14      	ldr	r3, [pc, #80]	; (8004a38 <HAL_UART_MspInit+0x80>)
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f2:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <HAL_UART_MspInit+0x80>)
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <HAL_UART_MspInit+0x80>)
 80049f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049fe:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <HAL_UART_MspInit+0x80>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a0a:	230c      	movs	r3, #12
 8004a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0e:	2302      	movs	r3, #2
 8004a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a16:	2303      	movs	r3, #3
 8004a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a1a:	2307      	movs	r3, #7
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a1e:	f107 0314 	add.w	r3, r7, #20
 8004a22:	4619      	mov	r1, r3
 8004a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a28:	f7fc f8ba 	bl	8000ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	3728      	adds	r7, #40	; 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40004400 	.word	0x40004400
 8004a38:	40021000 	.word	0x40021000

08004a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004a40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004a42:	e003      	b.n	8004a4c <LoopCopyDataInit>

08004a44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004a44:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004a46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004a48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004a4a:	3104      	adds	r1, #4

08004a4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004a4c:	480b      	ldr	r0, [pc, #44]	; (8004a7c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004a50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004a52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004a54:	d3f6      	bcc.n	8004a44 <CopyDataInit>
	ldr	r2, =_sbss
 8004a56:	4a0b      	ldr	r2, [pc, #44]	; (8004a84 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004a58:	e002      	b.n	8004a60 <LoopFillZerobss>

08004a5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004a5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004a5c:	f842 3b04 	str.w	r3, [r2], #4

08004a60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <LoopForever+0x16>)
	cmp	r2, r3
 8004a62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004a64:	d3f9      	bcc.n	8004a5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004a66:	f7ff ff41 	bl	80048ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a6a:	f000 f811 	bl	8004a90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a6e:	f7ff fcc7 	bl	8004400 <main>

08004a72 <LoopForever>:

LoopForever:
    b LoopForever
 8004a72:	e7fe      	b.n	8004a72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004a74:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8004a78:	08004b84 	.word	0x08004b84
	ldr	r0, =_sdata
 8004a7c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004a80:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8004a84:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8004a88:	20000ea8 	.word	0x20000ea8

08004a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a8c:	e7fe      	b.n	8004a8c <ADC1_2_IRQHandler>
	...

08004a90 <__libc_init_array>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	4e0d      	ldr	r6, [pc, #52]	; (8004ac8 <__libc_init_array+0x38>)
 8004a94:	4c0d      	ldr	r4, [pc, #52]	; (8004acc <__libc_init_array+0x3c>)
 8004a96:	1ba4      	subs	r4, r4, r6
 8004a98:	10a4      	asrs	r4, r4, #2
 8004a9a:	2500      	movs	r5, #0
 8004a9c:	42a5      	cmp	r5, r4
 8004a9e:	d109      	bne.n	8004ab4 <__libc_init_array+0x24>
 8004aa0:	4e0b      	ldr	r6, [pc, #44]	; (8004ad0 <__libc_init_array+0x40>)
 8004aa2:	4c0c      	ldr	r4, [pc, #48]	; (8004ad4 <__libc_init_array+0x44>)
 8004aa4:	f000 f820 	bl	8004ae8 <_init>
 8004aa8:	1ba4      	subs	r4, r4, r6
 8004aaa:	10a4      	asrs	r4, r4, #2
 8004aac:	2500      	movs	r5, #0
 8004aae:	42a5      	cmp	r5, r4
 8004ab0:	d105      	bne.n	8004abe <__libc_init_array+0x2e>
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ab8:	4798      	blx	r3
 8004aba:	3501      	adds	r5, #1
 8004abc:	e7ee      	b.n	8004a9c <__libc_init_array+0xc>
 8004abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ac2:	4798      	blx	r3
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	e7f2      	b.n	8004aae <__libc_init_array+0x1e>
 8004ac8:	08004b7c 	.word	0x08004b7c
 8004acc:	08004b7c 	.word	0x08004b7c
 8004ad0:	08004b7c 	.word	0x08004b7c
 8004ad4:	08004b80 	.word	0x08004b80

08004ad8 <memset>:
 8004ad8:	4402      	add	r2, r0
 8004ada:	4603      	mov	r3, r0
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d100      	bne.n	8004ae2 <memset+0xa>
 8004ae0:	4770      	bx	lr
 8004ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ae6:	e7f9      	b.n	8004adc <memset+0x4>

08004ae8 <_init>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr

08004af4 <_fini>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	bf00      	nop
 8004af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afa:	bc08      	pop	{r3}
 8004afc:	469e      	mov	lr, r3
 8004afe:	4770      	bx	lr
